{"id":32266,"name":"revamped-ActiveCampaignFullSyncRun","userId":27893,"accountId":24428,"createdDate":"2020-01-09T09:09:59Z","steps":[{"id":260148,"onSuccess":["ConfigParams"],"onFailure":["ConfigErrorCard"],"name":"ChargebeeConfigParams","type":"httpRequest","properties":{"method":"GET","url":"${steps.InputParams.input.config.url}","headers":"${steps.InputParams.input.config.auth}","query":"${steps.InputParams.input.config.query}"}},{"id":260243,"onSuccess":["gotExecutionStatus"],"onFailure":[],"name":"ChargebeeGetExecutionStatus","type":"formula","properties":{"formulaId":"31257","args":"${steps.ExParam.data}"}},{"id":260219,"onSuccess":["isLastSyncDetailsApiSuccess"],"onFailure":[],"name":"ChargebeeGetLastSyncDetails","type":"formula","properties":{"formulaId":"31257","args":"${steps.InputParams.retrieveLatestSyncConfig}"}},{"id":260252,"onSuccess":["isTpEntityMappingApiSuccess"],"onFailure":[],"name":"ChargebeeGetTpEntityMapping","type":"formula","properties":{"formulaId":"31257","args":"${steps.TPMappingParam.params}"}},{"id":260238,"onSuccess":["gotTpErrorDetails"],"onFailure":[],"name":"ChargebeeGetTpErrorDetails","type":"formula","properties":{"formulaId":"31257","args":"${steps.GetThirdPartyConfigParams.params}"}},{"id":260217,"onSuccess":["IsTpIntegConfFetched"],"onFailure":[],"name":"ChargebeeGetTpIntegConf","type":"formula","properties":{"formulaId":"31257","args":"${steps.InputParams.getTpConfigParams}"}},{"id":260250,"onSuccess":["IsTpIntegConfFetched_2"],"onFailure":[],"name":"ChargebeeGetTpIntegConf_2","type":"formula","properties":{"formulaId":"31257","args":"${steps.InputParams.getTpConfigParams}"}},{"id":260254,"onSuccess":["isLastSyncClosed"],"onFailure":[],"name":"ChargebeePostCloseLastSync","type":"formula","properties":{"formulaId":"31258","args":"${steps.CloseLastSyncParam}"}},{"id":260225,"onSuccess":["isCreateNewSyncDetailsSuccess"],"onFailure":[],"name":"ChargebeePostCreateNewSyncDetails","type":"formula","properties":{"formulaId":"31258","args":"${steps.NewSyncDetails.payload}"}},{"id":260248,"onSuccess":["isUpdateSyncFailedSuccess"],"onFailure":[],"name":"ChargebeePostUpdateSyncFailed","type":"formula","properties":{"formulaId":"31258","args":"${steps.CheckStatus}"}},{"id":260227,"onSuccess":["isUpdateRunSyncSuccess"],"onFailure":[],"name":"ChargebeePostUpdateSyncRunning","type":"formula","properties":{"formulaId":"31258","args":"${steps.RunSyncParam}"}},{"id":261484,"onSuccess":["isUpdateSyncSuccess"],"onFailure":[],"name":"ChargebeePostUpdateSyncSuccess","type":"formula","properties":{"formulaId":"31258","args":"${steps.UpdateTpSyncSuccessParams.tpConfigUpdateParams}"}},{"id":260229,"onSuccess":["isTpIntegConfUpdated"],"onFailure":[],"name":"ChargebeePostUpdateTpIntegConf","type":"formula","properties":{"formulaId":"31258","args":"${steps.UpdateTPParams.tpConfigUpdateParams}"}},{"id":260256,"onSuccess":["isUpdateSuccess_2"],"onFailure":[],"name":"ChargebeePostUpdateTpIntegConf_2","type":"formula","properties":{"formulaId":"31258","args":"${steps.UpdateTpConfigParams.tpConfigUpdateParams}"}},{"id":260235,"onSuccess":["isTpConfigUpdated_2"],"onFailure":[],"name":"ChargebeePostUpdateTpIntegConfWithIgnoreFlag","type":"formula","properties":{"formulaId":"31258","args":"${steps.modifyConfig.tpConfigUpdateParams}"}},{"id":260240,"onSuccess":["IsTpIntegConfFetchedWithIgnoreIndex"],"onFailure":[],"name":"ChargebeePostUpdateTpIntegConfWithIgnoreIndex","type":"formula","properties":{"formulaId":"31258","args":"${steps.updateIgnoreIndex.tpConfigUpdateParams}"}},{"id":260149,"onSuccess":[],"onFailure":["UpdateTPParams"],"name":"check","type":"filter","properties":{"body":"if( steps.InputParams.input.siteName === \"actcamp-test\"){\n  done(false);\n}\ndone(true);"}},{"id":260150,"onSuccess":["SendErrorCard"],"onFailure":[],"name":"CheckError","type":"request","properties":{"method":"GET","api":"/${steps.InputParams.input.type}/mapping","headers":"${steps.getErrorReasonPayload.mappingHeader}","query":"${steps.getErrorReasonPayload.query}"}},{"id":260151,"onSuccess":["isListPresent"],"onFailure":[],"name":"checkList","type":"request","properties":{"method":"GET","api":"/${steps.InputParams.input.type}/mapping","headers":"${steps.payload.mappingHeader}","query":"${steps.payload.query}"}},{"id":260152,"onSuccess":["constructErrorLogList"],"onFailure":["GetThirdPartyConfigParams"],"name":"CheckOffset","type":"filter","properties":{"body":"done(steps.ChargebeeGetTpErrorDetails.data.next_offset === undefined);"}},{"id":260153,"onSuccess":["ConstructLog"],"onFailure":[],"name":"CheckOffsetValue","type":"filter","properties":{"body":"done(steps.GetTPSuccessDetails.response.body.next_offset === undefined);"}},{"id":260154,"onSuccess":["HasError"],"onFailure":["HasError"],"name":"CheckStatus","type":"script","properties":{"body":"let batch = steps.ChargebeeGetTpIntegConf.data.config_json.batch || undefined;\nlet input = {\n  apiKey: steps.InputParams.input.apiKey,\n  siteName: steps.InputParams.input.siteName,\n  siteDomain: steps.InputParams.input.siteDomain,\n  type: steps.InputParams.input.type,\n  error : false,\n  isStopSync: false,\n  done: false,\n  listError:false,\n  url : \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.ChargebeeGetLastSyncDetails.data.id,\n  headers: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n  },\n  query: steps.ChargebeeGetLastSyncDetails.data,\n};\n\nif((steps.ChargebeeGetExecutionStatus.data.status === \"failed\" || steps.ChargebeeGetExecutionStatus.data.status === \"error\") && batch.status !== \"success\"){\n  input.error = true;\n  input.done = true;\n  input.query.status = \"failed\";\n}else if(steps.ChargebeeGetExecutionStatus.data.status === \"success\" && batch.status !== \"success\" && batch.status !== \"running\" ){\n  input.error = true;\n  input.done = true;\n  input.query.status = \"failed\";\n  \n}else if(steps.ChargebeeGetExecutionStatus.data.status === \"success\" && batch.status === \"running\" ){\n  input.error = false;\n  input.done = false;\n  input.query.status = \"running\";\n}else if((steps.ChargebeeGetExecutionStatus.data.status === \"failed\" || steps.ChargebeeGetExecutionStatus.data.status === \"error\") &&  batch.status === \"success\"){\n  input.error = false;\n  input.done = true;\n  input.query.status = \"succeeded\";\n}else if(steps.ChargebeeGetExecutionStatus.data.status === \"success\" && batch.status === \"success\" ){\n  input.error = false;\n  input.done = true;\n  input.query.status = \"succeeded\";\n  \n}else if(steps.ChargebeeGetExecutionStatus.data.status === \"pending\"){\n  input.error = false;\n  input.done = false;\n  input.query.status = \"running\";\n}\n\ndone(input);"}},{"id":260155,"onSuccess":["UpdateTpConfigParams"],"onFailure":[],"name":"CloseLastSync","type":"httpRequest","properties":{"method":"POST","url":"${steps.CloseLastSyncParam.url}","headers":"${steps.CloseLastSyncParam.auth}","query":"${steps.CloseLastSyncParam.body}"}},{"id":260156,"onSuccess":["ChargebeePostCloseLastSync"],"onFailure":[],"name":"CloseLastSyncParam","type":"script","properties":{"body":"let input = {\n  apiKey: steps.InputParams.input.apiKey,\n   siteName: steps.InputParams.input.siteName,\n   siteDomain: steps.InputParams.input.siteDomain,\n   type: steps.InputParams.input.type,\n  url : \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.ChargebeeGetLastSyncDetails.data.id,\n  headers: {\n     Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n   },\n  query: steps.ChargebeeGetLastSyncDetails.data,\n};\ninput.query.status = \"failed\";\n\ndone(input);\n\n\n"}},{"id":260157,"onSuccess":[],"onFailure":[],"name":"ConfigErrorCard","type":"script","properties":{"body":"let url= steps.ChargebeeGetTpIntegConf.data.third_party_configuration.config_json.cloudElements.url;\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.InputParams.input.unlink,\n    \"syncErrors\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \" \",\n            \"icon\": \"WARNING\",\n            \"listActionContent\":[]\n        },\n         \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"id\": \"check2\",\n            \"icon\" : \"ERROR\"   ,\n            \"heading\": \"Error\",\n            \"subHeading\": \"An issue was encountered due to which the sync did not succeed. Please retry sync and if the issue still persists, contact support\",\n                 \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":  formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"api-key\": steps.InputParams.input.apiKey,\n                    \"site-name\": steps.InputParams.input.siteName,\n                    \"syncNowButtonClick\": \"syncNow\",\n                    \"syncNow\": \"syncNow\"\n                   \n                }\n            }\n                  }\n                }\n              ]\n           \n        },\n         \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    }]\n};\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":260158,"onSuccess":["ChargebeeGetLastSyncDetails"],"onFailure":[],"name":"ConfigParams","type":"script","properties":{"body":"let configJson = steps.ChargebeeGetTpIntegConf.data;\nconfigJson.body = configJson.config_json.cloudElements.formula.mapping.inputs;\n  configJson.body.initialSync = false;\n  configJson.body.apiKey = steps.InputParams.input.apiKey;\n  configJson.body.siteName = steps.InputParams.input.siteName;\n  configJson.body.siteDomain = steps.InputParams.input.siteDomain;\n  configJson.body.type = steps.InputParams.input.type;\n  \nconfigJson.body.debugLoggingEnabled = true;\n\nif(configJson.body !== undefined){\n  configJson.body.initialSync = false;\n  configJson.body.apiKey = steps.InputParams.input.apiKey;\n  configJson.body.siteName = steps.InputParams.input.siteName;\n  configJson.body.siteDomain = steps.InputParams.input.siteDomain;\n  configJson.body.type = steps.InputParams.input.type;\n}\n\ndone(configJson);"}},{"id":260159,"onSuccess":["MakeCard"],"onFailure":[],"name":"constructErrorList","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet listContent=[];\n\nif(steps.TpData.errorLog.length === 0){\n  done({listContent:listContent});\n}\n\nlet err = steps.TpData.errorLog;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nfor(let i=0;i<err.length;++i){\n\n  listContent.push({\n            \"button\": {\n              \"display\": \"IGNORE\",\n              \"id\": \"ignore1\",\n              \"popUp\": {\n                  \"apiEndPoint\":{\n                \"apiUrl\": url + \"/sync/run\",\n                \"headers\": {\n                  \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                 \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      },\n                \"type\":\"GET\"\n              },\n                \"cancelButton\": \"Dismiss\",\n                \"description\": \"Once this error is ignored, this record will not be synced to ActiveCampaign.\",\n                \"submitButton\": \"Yes, go ahead\",\n                \"title\": \"Are you sure you want to ignore?\",\n                \"type\": \"SIMPLE\",\n                \"usecase\": \"DANGER\"\n              },\n              \"type\": \"POP_UP\"\n            }\n           \n          });\n  listContent[i].content=err[i];\n  listContent[i].button.popUp.apiEndPoint.input.ignoreIndex=i;\n  listContent[i].button.id=\"ignore\"+(i+1);\n  if(listContent.length>14){\n    break;\n  }\n}\ndone({listContent:listContent});"}},{"id":260160,"onSuccess":["isIgnoreIndexValuePresent"],"onFailure":[],"name":"constructErrorLogList","type":"script","properties":{"body":"let TpErrorList = steps.ErrorList.list;\nlet errorRecord = [];\nlet listContent = [];\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\nlet url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet ignoredArrayLength = formula.sync.ignoreIndexArray !== undefined ? formula.sync.ignoreIndexArray.length : 0;\nignoredArrayLength = steps.InputParams.input.ignoreIndex !== undefined ? ignoredArrayLength + 1 : ignoredArrayLength;\n\nfor ( let i = 0; i < TpErrorList.length; ++i){\n  errorRecord.push(TpErrorList[i].third_party_entity_mapping.error_message);\n}\n\nfor(let i = 0; i < errorRecord.length; ++i){\n\n  listContent.push({\n            \"button\": {\n              \"display\": \"IGNORE\",\n              \"id\": \"ignore1\",\n              \"popUp\": {\n                  \"apiEndPoint\":{\n                \"apiUrl\":url+\"/sync/run\",\n                \"headers\": {\n                  \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      },\n                \"type\":\"GET\"\n              },\n                \"cancelButton\": \"Dismiss\",\n                \"description\": \"Once this error is ignored, this record will not be synced to ActiveCampaign.\",\n                \"submitButton\": \"Yes, go ahead\",\n                \"title\": \"Are you sure you want to ignore?\",\n                \"type\": \"SIMPLE\",\n                \"usecase\": \"DANGER\"\n              },\n              \"type\": \"POP_UP\"\n            }\n           \n          });\n  listContent[i].content = errorRecord[i];\n  listContent[i].button.popUp.apiEndPoint.input.ignoreIndex = i;\n  listContent[i].button.id = \"ignore\" + ( i + 1);\n  if(listContent.length > (15 + ignoredArrayLength)){\n    break;\n  }\n}\ndone({listContent:listContent,\n  errorRecord:errorRecord\n});\n\n"}},{"id":260161,"onSuccess":["constructErrorLogList"],"onFailure":[],"name":"ConstructLog","type":"script","properties":{"body":"let TpErrorList = steps.ErrorList.list;\nlet errorRecord = [];\n\nfor ( let i = 0; i < TpErrorList.length; ++i){\n  errorRecord.push(TpErrorList[i].third_party_entity_mapping.error_message);\n}\n\ndone({\n  errorLog: errorRecord\n})\n\n"}},{"id":260162,"onSuccess":["RunSyncParam"],"onFailure":["ConfigErrorCard"],"name":"createSync","type":"httpRequest","properties":{"method":"POST","url":"${steps.NewSyncDetails.url}","headers":"${steps.InputParams.input.config.auth}","query":"${steps.NewSyncDetails.query}"}},{"id":260163,"onSuccess":["delay5s"],"onFailure":[],"name":"delay","type":"script","properties":{"body":"let payload = {\n  url: \"https://api.cloud-elements.co.uk/elements/api-v2/createDelay\",\n  headers:{\n    \"authorization\": \"User 0d44SS3tYoGuwakQcpXX3pya/oy0k2duFVqQ6WJMZTg=, Organization 705f11c2b0c933ebde1cf6bc5b26bdf7\",\n    \"Elements-Formula-Instance-Id\": \"961\"\n  }\n};\n\ndone({\n  payload: payload\n});"}},{"id":260164,"onSuccess":["GetResult"],"onFailure":[],"name":"delay5s","type":"httpRequest","properties":{"method":"GET","url":"${steps.delay.payload.url}","headers":"${steps.delay.payload.headers}","query":"{}"}},{"id":260165,"onSuccess":["CheckOffset"],"onFailure":[],"name":"ErrorList","type":"script","properties":{"body":"let details = steps.ChargebeeGetTpErrorDetails.data.list;\nlet list = [];\nif(steps.ErrorList !== undefined){\n  list = steps.ErrorList.list;\n}\n\nif(details.length !== 0){\n  if(list.length === 0){\n    list = details;\n  }else{\n    list = list.concat(details);\n  }\n}\n\ndone({list : list});\n"}},{"id":260166,"onSuccess":["CheckStatus"],"onFailure":["CloseLastSyncParam"],"name":"ExecutionStatus","type":"httpRequest","properties":{"method":"GET","url":"${steps.ExParam.url}","headers":"${steps.ExParam.auth}","query":"${steps.ExParam.query}"}},{"id":260167,"onSuccess":["ChargebeeGetExecutionStatus"],"onFailure":[],"name":"ExParam","type":"script","properties":{"body":"let password = \"\";\n\nlet data = {\n   headers:{\n        Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + password)\n      },\n    query:{\n      execution_id: steps.ChargebeeGetLastSyncDetails.data.context.excecutionId\n    },\n    url : \"https://\"+steps.InputParams.input.siteName+\".integrations.\"+steps.InputParams.input.siteDomain+\"/api/activecampaign/ipaasexecution\"\n};\n\ndone({\n  data: data\n});"}},{"id":260168,"onSuccess":["CheckError"],"onFailure":[],"name":"getErrorReasonPayload","type":"script","properties":{"body":"  let body = {\n    mappingHeader :  {\n        \"Elements-Formula-Instance-Id\": steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.mapping.instance\n    },\n    query:JSON.stringify({\n      checkList:true\n    })\n  };\n  \n  done(body);"}},{"id":260169,"onSuccess":["UpdateStatus"],"onFailure":[],"name":"GetResult","type":"request","properties":{"method":"GET","api":"/formulas/instances/executions/steps/${steps.CheckStatus.result.id}/values"}},{"id":260170,"onSuccess":["ChargebeeGetTpErrorDetails"],"onFailure":[],"name":"GetThirdPartyConfigParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.type;\n\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.ChargebeeGetLastSyncDetails.data;\nif(syncStaus.status === \"succeeded\"){\n  startTime = syncStaus.context.syncData.syncStart;\n}else{\n  startTime = syncStaus.context.syncData.previousSyncStart;\n  endTime = syncStaus.context.syncData.previousSyncEnd;\n}\n\nlet params = {\n  apiKey: apiKey,\n  siteName: siteName,\n  siteDomain:siteDomain,\n  type: type,\n  url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_entity_mappings/list_all\",\n  headers:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query:{\n    integration_name: type,\n    \"status[is]\": \"update_failed\",\n    \"limit\": 100,\n    \"modified_at[after]\": startTime,\n    \"modified_at[before]\" : syncStaus.status === \"failed\" ? endTime : undefined\n  }\n};\n\nif(steps.GetThirdPartyConfigParams !== undefined){\n  params.query.offset = steps.ChargebeeGetTpErrorDetails.data.next_offset;\n}\n\ndone({params:params});"}},{"id":260171,"onSuccess":["ErrorList"],"onFailure":[],"name":"GetThirdPartyErrorDetails","type":"httpRequest","properties":{"method":"GET","url":"${steps.GetThirdPartyConfigParams.params.input.config.url}","headers":"${steps.GetThirdPartyConfigParams.params.input.config.auth}","query":"${steps.GetThirdPartyConfigParams.params.input.config.query}"}},{"id":260172,"onSuccess":["TPMappingParam"],"onFailure":[],"name":"GetTpConfiguration","type":"httpRequest","properties":{"method":"GET","url":"${steps.InputParams.input.config.url}","headers":"${steps.InputParams.input.config.auth}","query":"${steps.InputParams.input.config.query}"}},{"id":260173,"onSuccess":["TpData"],"onFailure":[],"name":"GetTPMapping1","type":"httpRequest","properties":{"method":"GET","url":"${steps.TPMappingParam.params.config.url}","headers":"${steps.TPMappingParam.params.config.auth}","query":"${steps.TPMappingParam.params.config.query}"}},{"id":260174,"onSuccess":["ConstructLog"],"onFailure":[],"name":"GetTPSuccessDetails","type":"httpRequest","properties":{"method":"GET","url":"${steps.TPSuccessDetailsParam.params.config.url}","headers":"${steps.TPSuccessDetailsParam.params.config.auth}","query":"${steps.TPSuccessDetailsParam.params.config.query}"}},{"id":260244,"onSuccess":["CheckStatus"],"onFailure":["CloseLastSyncParam"],"name":"gotExecutionStatus","type":"filter","properties":{"body":"if(steps.ChargebeeGetExecutionStatus.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260239,"onSuccess":["ErrorList"],"onFailure":["ConfigErrorCard"],"name":"gotTpErrorDetails","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpErrorDetails.cb_status === \"success\"){\n  done(true);\n}else{\n  done(false);\n}"}},{"id":260175,"onSuccess":["ChargebeeGetTpIntegConf_2"],"onFailure":["SendProcessCard"],"name":"HasDone","type":"filter","properties":{"body":"done(steps.CheckStatus.done);"}},{"id":260176,"onSuccess":["ChargebeePostUpdateSyncFailed"],"onFailure":["HasDone"],"name":"HasError","type":"filter","properties":{"body":"done(steps.CheckStatus.error);"}},{"id":260177,"onSuccess":["SyncAgain"],"onFailure":["ExParam"],"name":"HasNoExcecution","type":"filter","properties":{"body":"let flag = false;\nlet syncStatus = steps.ChargebeeGetLastSyncDetails.data.status;\nif(syncStatus === \"succeeded\" || syncStatus === \"failed\") {\n  flag = true;\n}\ndone(flag);"}},{"id":260178,"onSuccess":[],"onFailure":[],"name":"hasOffset","type":"filter","properties":{"body":"done(steps.hasOffsetSetup.input);\n"}},{"id":260179,"onSuccess":[],"onFailure":[],"name":"hasOffsetSetup","type":"script","properties":{"body":"let flag = true;\n\nif(steps.changeStatus2 !== undefined){\n    flag = true;\n}\n\nif(steps.changeStatus1 !== undefined){\n    flag = false;\n}\n\n\ndone({\n  input: flag\n});"}},{"id":260180,"onSuccess":["ChargebeeGetTpIntegConf"],"onFailure":[],"name":"InputParams","type":"script","properties":{"body":"let apiKey = trigger.args.request.query['cb-api-key'];\nlet siteName = trigger.args.request.query['cb-site-name'];\nlet type = trigger.args.request.query['type'];\nlet siteDomain = trigger.args.request.query['cb-domain'];\nlet syncNow = trigger.args.request.query['syncNow'];\n// let syncNowButtonClick = trigger.args.request.query['syncNowButtonClick'];\n\nlet seeAllErrors = trigger.args.request.query['seeAllErrors'];\nlet ignoreAll = trigger.args.request.query['ignoreAll'];\nlet ignoreIndex = trigger.args.request.query['ignoreIndex'];//to remove a specific error from list content \n\nif(seeAllErrors === undefined){\n  seeAllErrors = \"false\";\n}\n\nlet mainTrigger = trigger.args;\n\nlet errorEmailEndpoint =  'https://' + siteName + '.' + siteDomain + '/adhoc_checkout_email/api/send';\n\n// let errorEmailAddress = \"integrations-growth-internal@chargebee.com\";\nlet errorEmailAddress = \"sample@gmail.com\";\n\nlet password = \"\";\n\nlet unlink =  {\n  \"id\": \"unlink\",\n  \"display\": \"Unlink Integration\",\n  \"buttonLook\": \"MUTTED\",\n  \"type\": \"POP_UP\",\n  \"popUp\": {\n      \"type\": \"SIMPLE\",\n      \"title\": \"Do you really want to unlink the integration?\",\n      \"submitButton\": \"Unlink\",\n      \"cancelButton\": \"Dismiss\",\n      \"description\": \"This will remove all the configuration details such as login authentication, configurations mapping etc. If you want to sync again, you will have to start the sync process from the beginning.\",\n      \"apiEndPoint\": {\n          \"apiUrl\": \"https://staging.cloud-elements.com/elements/api-v2/unlink\",\n          \"type\": \"GET\",\n          \"headers\": {\n              \"Elements-Formula-Instance-Id\": \"377707\"\n          },\n          \"input\": {\n              \"type\": \"activecampaign\"\n          }\n      }\n  }\n}\n\nlet getTpConfigParams = {\n    // url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_configurations\",\n    url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/third_party_configurations/tpmeta\",\n    headers:{\n      Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password),\n      api_key: apiKey\n    },\n    query:{\n      integration_name: type\n    },\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    password: password\n};\n\nlet updateTpConfigParams = {\n    url: \"https://\"+siteName+\".integrations.\"+siteDomain+\"/integrations/update_tp_integ_conf\",\n    headers: {\n     \"Content-Type\": \"application/json\",\n     \"cache-control\": \"no-cache\"\n    },\n    body:{\n      integration_name: type,\n      site_name: siteName,\n      api_key: apiKey\n    },\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain: siteDomain,\n    type: type,\n    password: password\n};\n\nlet retrieveLatestSyncConfig = {\n  // url:\"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_sync_details/retrieve_latest_sync\",\n  url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/third_party_sync_details/tpmeta?integration_name=activecampaign\",\n  headers:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password),\n    api_key: apiKey\n  },\n  query:{\n    'third_party_configuration[integration_name]': type\n  },\n  apiKey: apiKey,\n  siteName: siteName,\n  siteDomain:siteDomain,\n  type: type,\n  password: password\n};\n\nlet params = {\n  getTpConfigParams: getTpConfigParams,\n  updateTpConfigParams: updateTpConfigParams,\n  retrieveLatestSyncConfig: retrieveLatestSyncConfig,\n  mainTrigger: mainTrigger,\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    syncNow:syncNow,\n    seeAllErrors:seeAllErrors,\n    type: type,\n    unlink:unlink,\n    ignoreAll:ignoreAll,\n    ignoreIndex:ignoreIndex,\n    errorEmailEndpoint: errorEmailEndpoint,\n    errorEmailAddress: errorEmailAddress\n  }\n};\n\n\ndone(params);"}},{"id":260226,"onSuccess":["RunSyncParam"],"onFailure":["ConfigErrorCard"],"name":"isCreateNewSyncDetailsSuccess","type":"filter","properties":{"body":"if(steps.ChargebeePostCreateNewSyncDetails.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260181,"onSuccess":["GetThirdPartyConfigParams"],"onFailure":["modifyConfig"],"name":"isIgnoreAllFlow","type":"filter","properties":{"body":"let ignoreIndex=steps.InputParams.input.ignoreIndex;\nlet ignoreAll=steps.InputParams.input.ignoreAll;\nlet configIgnoreAll=steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.sync.ignoreAll;\nlet syncStatus = steps.ChargebeeGetLastSyncDetails.data;\nlet failledRecords= syncStatus.context.syncData.failed;\nlet ignoreIndexArray=steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.sync.ignoreIndexArray;\n\nif(ignoreAll !==undefined || configIgnoreAll ===\"true\"){\n  done(false);\n}\n\nif(ignoreIndex !==undefined && ((ignoreIndexArray.length + 1)=== failledRecords)){\n  done(false);\n}\n\ndone(true);"}},{"id":260182,"onSuccess":["SendLastSyncDetails"],"onFailure":["updateIgnoreIndex"],"name":"isIgnoreIndexValuePresent","type":"filter","properties":{"body":"let ignoreIndex=steps.InputParams.input.ignoreIndex;//index to be ignore\ndone(ignoreIndex===undefined);"}},{"id":260183,"onSuccess":["isIgnoreAllFlow"],"onFailure":["LastSyncDetailsKeyExpired"],"name":"isKeyExpired","type":"filter","properties":{"body":"let statusCode = steps.checkList.response.body.code;\n\nif(statusCode === 403){\n  done(false);\n}\ndone(true);"}},{"id":260255,"onSuccess":["UpdateTpConfigParams"],"onFailure":["ConfigErrorCard"],"name":"isLastSyncClosed","type":"filter","properties":{"body":"if(steps.ChargebeePostCloseLastSync.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260220,"onSuccess":["HasNoExcecution"],"onFailure":["StartExcecution"],"name":"isLastSyncDetailsApiSuccess","type":"filter","properties":{"body":"if(steps.ChargebeeGetLastSyncDetails.cb_status == \"success\"){\n  done(true); \n}\nelse{\n  if(steps.ChargebeeGetLastSyncDetails.cb_code === 409){ //first sync for the site\n    done(true);\n  }\n  done(false);\n}"}},{"id":260184,"onSuccess":["isKeyExpired"],"onFailure":["LastSyncDetailsListNotPresent"],"name":"isListPresent","type":"filter","properties":{"body":"let formula= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\nlet statusCode=steps.checkList.response.body.code;\n\nlet flag = false;\nlet selectedListId = formula.mapping.inputs.list;\nlet lists = steps.checkList.response.body.code.lists;\n\nif(lists !== undefined && lists[selectedListId] === undefined){\n  flag = true;\n}\nif(statusCode === 404 || flag === true){\n  done(false);\n}\ndone(true);\n\n\n\n"}},{"id":260236,"onSuccess":["SendLastSyncDetailsIgnore"],"onFailure":["ConfigErrorCard"],"name":"isTpConfigUpdated_2","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateTpIntegConfWithIgnoreFlag.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260253,"onSuccess":["TpData"],"onFailure":["ConfigErrorCard"],"name":"isTpEntityMappingApiSuccess","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpEntityMapping.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260218,"onSuccess":["ConfigParams"],"onFailure":["ConfigErrorCard"],"name":"IsTpIntegConfFetched","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpIntegConf.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260251,"onSuccess":["UpdateTpSyncSuccessParams"],"onFailure":["ConfigErrorCard"],"name":"IsTpIntegConfFetched_2","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpIntegConf_2.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260241,"onSuccess":["SendLastSyncDetails"],"onFailure":["ConfigErrorCard"],"name":"IsTpIntegConfFetchedWithIgnoreIndex","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateTpIntegConfWithIgnoreIndex.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260230,"onSuccess":["SendProcessCard"],"onFailure":["ConfigErrorCard"],"name":"isTpIntegConfUpdated","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateTpIntegConf.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260228,"onSuccess":["UpdateTPParams"],"onFailure":["ConfigErrorCard"],"name":"isUpdateRunSyncSuccess","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateSyncRunning.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260257,"onSuccess":["getErrorReasonPayload"],"onFailure":["ConfigErrorCard"],"name":"isUpdateSuccess_2","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateTpIntegConf_2.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260249,"onSuccess":["UpdateTpConfigParams"],"onFailure":["sendErrorCard-IntegrationError"],"name":"isUpdateSyncFailedSuccess","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateSyncFailed.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":261487,"onSuccess":["TPMappingParam"],"onFailure":["ChargebeePostUpdateSyncFailed"],"name":"isUpdateSyncSuccess","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateSyncSuccess.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260185,"onSuccess":["HasNoExcecution"],"onFailure":["StartExcecution"],"name":"LastSyncDetails","type":"httpRequest","properties":{"method":"GET","url":"${steps.InputParams.input.config.syncUrl}","headers":"${steps.InputParams.input.config.auth}","query":"${steps.InputParams.input.config.syncQuery}"}},{"id":260186,"onSuccess":[],"onFailure":[],"name":"LastSyncDetailsKeyExpired","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n// let fullSyncLog = steps.ChargebeeGetTpIntegConf.data.third_party_configuration.config_json.cloudElements.logs.fullSync;\n\nlet fullSyncLog = steps.ChargebeeGetLastSyncDetails.data.context.syncData;\n\nlet succeessRecords;\n\nif (fullSyncLog.success !== undefined) {\n   succeessRecords = fullSyncLog.success;\n} else {\n   succeessRecords = 0;\n}\n\nlet card = {\n   \"icon\": \"/third_party/cn-xero.png\",\n   \"unlink\": steps.InputParams.input.unlink,\n   \"syncErrors\": [\n      {\n         \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"No errors found\",\n            \"icon\": \"WARNING\"\n         },\n         \"id\": \"sync_errors\",\n         \"isCardDone\": \"false\"\n      }\n   ],\n   \"overview\": [{\n      \"card\": {\n         \"type\": \"ACTION2\",\n         \"id\": \"check2\",\n         \"icon\": \"ERROR\",\n         \"heading\": \"Last sync done 0 Minutes ago \",\n         \"subHeading\": \"Looks like your ActiveCampaign key  is expired. Please resolve this for the sync to resume.\",\n         \"buttons\": [\n            {\n               \"id\": \"sync\",\n               \"display\": \"Sync now\",\n               \"icon\": \"AUTO_RENEW\",\n               \"type\": \"DIRECT_LINK\",\n               \"buttonLook\": \"EMPTY\",\n               \"request\": {\n                  \"type\": \"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                     \"apiUrl\": url + \"/sync/run\",\n                     \"type\": \"GET\",\n                     \"headers\": {\n                        \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                     },\n                     \"input\": {\n                        \"type\": steps.InputParams.input.type,\n                        \"siteDomain\": steps.InputParams.input.siteDomain,\n                        \"api-key\": steps.InputParams.input.apiKey,\n                        \"site-name\": steps.InputParams.input.siteName,\n                        \"syncNow\": \"syncNow\"\n\n                     }\n                  }\n               }\n            }\n         ]\n\n\n      },\n      \"id\": \"overview\",\n      \"isCardDone\": \"true\"\n   }]\n}\n\ncard.overview[0].card.heading = \"ActiveCampaign key has been expired\";\n\nif(steps.ChargebeeGetLastSyncDetails.data.status === \"failed\"){\n  card.overview[0].card.subHeading = undefined;\n}else{\n  card.overview[0].card.subHeading = succeessRecords + \" customers and subscriptions synced with ActiveCampaign\";\n}\n\n\ncard.overview[0].card.message = {\n   \"message\": \"Looks like your ActiveCampaign key  is expired. Please resolve this for the sync to resume.\",\n\n   \"button\": {\n      \"display\": \"Resolve\",\n      \"icon\": \"ARROW\",\n      \"id\": \"errors\",\n      \"type\": \"POP_UP\",\n      \"requestType\": \"authexpiry\",\n      \"popUp\": {\n         \"inputFields\": [\n            {\n               \"dispName\": \"Base Url\",\n               \"req\": \"true\",\n               \"type\": \"TEXT\",\n               \"id\": \"text\",\n               \"placeholder\": \"EG: ABC.ACTIVEHOSTED.COM \"\n            },\n            {\n               \"dispName\": \"API Secret\",\n               \"req\": \"true\",\n               \"type\": \"PASSWORD\",\n               \"id\": \"password\",\n               \"placeholder\": \"eg: 1233asfsdf23434343434\"\n            },\n            {\n               \"req\": \"true\",\n               \"type\": \"CHECKBOX\",\n               \"id\": \"checkbox1\",\n               \"desc\": \"I understand that, ActiveCampaign may store my customer and subscription data. (Please refer to ActiveCampaign's <a href='https://www.activecampaign.com/terms-of-service'>Terms of Service</a>, <a href='https://www.activecampaign.com/consent-policy'>Consent policy</a> and <a href='https://www.activecampaign.com/privacy-policy'>Privacy policy</a>).\"\n            }\n         ],\n         \"message\": {\n            \"message\": \"You can get your Base URL and API secret from ActiveCampaign by navigating to Settings > Developer\"\n         },\n         \"title\": \"Connect to ActiveCampaign\",\n         \"submitButton\": \"Connect\",\n         \"cancelButton\": \"Dismiss\",\n         \"description\": \"Specify your ActiveCampaign Base URL and API secret\",\n         \"advance\": \"true\",\n         \"type\": \"INPUT\",\n         \"apiEndPoint\": {\n            \"apiUrl\": url + \"/create\",\n            \"type\": \"GET\",\n            \"headers\": {\n               \"Elements-Formula-Instance-Id\": formula.activeCampaignCreateSetup.instance\n            },\n            \"input\": {\n               \"type\": steps.InputParams.input.type,\n               \"siteDomain\": steps.InputParams.input.siteDomain,\n               \"formulaCreate\": formula.create.instance,\n               \"isReauthenticate\": true\n\n            }\n         }\n      }\n   }\n}\ncard.overview[0].card.message.icon = \"DANGER_INFO\";\ncard.overview[0].card.message.messageLook = \"DANGER\";\n\n\ndone({\n   statusCode: 200,\n   result: card\n});"}},{"id":260187,"onSuccess":[],"onFailure":[],"name":"LastSyncDetailsListNotPresent","type":"script","properties":{"body":"let url= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\n\nlet fullSyncLog = steps.ChargebeeGetLastSyncDetails.data.context.syncData;\n\nlet succeessRecords;\n\nif(fullSyncLog.success !== undefined){\n  succeessRecords = fullSyncLog.success;\n}else{\n  succeessRecords = 0;\n}\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.InputParams.input.unlink,\n    \"syncErrors\": [\n    {\n      \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \"No errors found\",\n            \"icon\" : \"WARNING\"\n         },\n      \"id\": \"sync_errors\",\n      \"isCardDone\": \"false\"\n    }\n  ],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"id\": \"check2\",\n            \"icon\" : \"ERROR\"   ,\n            \"heading\": \"Last sync done 0 Minutes ago \",\n            \"subHeading\": \"Looks like the list in ActiveCampaign has been deleted. Please resolve this for the sync to resume.\",\n                    \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"api-key\": steps.InputParams.input.apiKey,\n                    \"site-name\": steps.InputParams.input.siteName,\n                    \"syncNow\": \"syncNow\"\n                   \n                }\n            }\n                  }\n                }\n              ]\n           \n        },\n         \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    }]\n}\n\n  card.overview[0].card.heading =  \"List unavailable in ActiveCampaign\";\n  \n  if(steps.ChargebeeGetLastSyncDetails.data.status === \"failed\"){\n    card.overview[0].card.subHeading = undefined;\n  }else{\n    card.overview[0].card.subHeading =   succeessRecords +\" customers and subscriptions synced with ActiveCampaign\";\n  }\n  \n  card.overview[0].card.message = {\n    \"message\": \"Looks like the list in ActiveCampaign has been deleted. Please resolve this for the sync to resume.\",\n    \"button\": {\n       \"display\": \"Resolve\",\n           \"icon\": \"ARROW\",\n           \"id\": \"resolve\",\n           \"type\": \"EDIT_STEP\",\n            \"editConfig\":{\n           \"integration\":\"activecampaign\",\n           \"stepId\":\"step_2\",\n           \"apiEndPoint\": {\n              \"type\":\"GET\",\n              \"apiUrl\":\"https://raw.githubusercontent.com/cb-Vinothini/ipaas_local/master/edit_mapping_step.json\",\n               \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignMappingSetup.instance\n                },\n              \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"api-key\": steps.InputParams.input.apiKey,\n                    \"site-name\": steps.InputParams.input.siteName,\n                    \"resolveButtonAction\": true,\n                    \"op\": \"edit\"\n               \n                   \n                }\n           }\n           }\n      \n      }\n    }\n  card.overview[0].card.message.icon = \"DANGER_INFO\";\n  card.overview[0].card.message.messageLook = \"DANGER\";\n\n\ndone({\n  statusCode: 200,\n  result: card\n});\n\n"}},{"id":260188,"onSuccess":[],"onFailure":[],"name":"MakeCard","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf_2.data.config_json.cloudElements.url;\nlet fileId = steps.ChargebeeGetTpIntegConf_2.data.config_json.cloudElements.chargebee.s3linkforFullsyncError;\nlet formula = steps.ChargebeeGetTpIntegConf_2.data.config_json.cloudElements.formula;\nlet unlink = steps.InputParams.input.unlink;\nunlink.popUp.apiEndPoint.headers[\"Elements-Formula-Instance-Id\"]=formula.ActiveCampaignUnlinkSetup.instance;\nlet failedRecords = formula.sync.totalFailedRecords;\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": unlink,\n    \"syncErrors\": [{\n        \"card\": {\n          \t \"id\":\"check3\",\n            \"type\": \"ACTION3\",\n            \"heading\": ( failedRecords === 0 ? \"No\" : failedRecords )+\" errors found  \",\n             \"listActionContent\":steps.constructErrorList.listContent,\n        \n          \"buttons\":[\n         {      \n        \"display\": \"Download CSV\",       \n        \"icon\": \"CLOUD_DOWNLOAD\",         \n        \"id\": \"download\",       \n        \"fileId\": fileId,           \n        \"type\": \"DOWNLOAD_FILE\"         \n             },\n          {\n            \"id\":\"confirmation\",\n            \"display\" : \"IGNORE ALL\",\n            \"buttonLook\":\"EMPTY\",\n            \"icon\" : \"CLOSE\",\n            \"type\" : \"POP_UP\",\n            \"popUp\":{\n              \"type\":\"SIMPLE\",\n              \"title\":\"Are you sure you want to ignore these errors?\",\n              \"submitButton\":\"Yes, go ahead\",\n              \"cancelButton\":\"Dismiss\",\n              \"usecase\":\"DANGER\",\n              \"description\":\"Subscription data of these customers will not be synced with ActiveCampaign until you resolve these errors.\",\n              \"apiEndPoint\":{\n                \"apiUrl\": url+\"/sync/run\",\n                \"headers\": {\n                  \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                 \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"ignoreAll\": \"true\",\n                       \"totalRecordsSynced\":formula.sync.totalRecordsSynced\n\n                      \n                      },\n                \"type\":\"GET\"\n              }\n            }\n          }\n        ]\n        \n        },\n        \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"heading\": \"Last sync done 0 Minutes ago \",\n            \"id\": \"check2\",\n            \"subHeading\": formula.sync.totalRecordsSynced + \"  customers and subscriptions synced with ActiveCampaign\",\n            \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"api-key\": steps.InputParams.input.apiKey,\n                    \"site-name\": steps.InputParams.input.siteName,\n                    \"syncNow\": \"syncNow\"\n                   \n                }\n            }\n                  }\n                }\n              ],\n        },\n        \"id\" : \"overview\",\n        \"isCardDone\":\"true\"\n    }]\n}\n\nif(formula.sync.totalFailedRecords > 0) {\n  card.overview[0].card.message = {\n    \"message\": formula.sync.totalFailedRecords + \" customers and subscriptions could not be synced to ActiveCampaign\",\n    \"button\": {\n      \"id\": \"errors\",\n      \"display\": \"See all errors\",\n      \"icon\": \"ARROW\",\n      \"type\": \"TAB_CHANGE\",\n      \n      }\n    }\n  card.overview[0].card.message.icon = \"WARNING\";\n  card.overview[0].card.message.messageLook = \"WARN\";\n}\n\nif(failedRecords === 0){\n  card.syncErrors =  [\n    {\n      \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \"No errors found\",\n            \"icon\" : \"WARNING\"\n         },\n      \"id\": \"sync_errors\",\n      \"isCardDone\": \"false\"\n    }\n  ]\n}\n\nif(formula.sync.execution.result.syncStatus === \"stopped\"){\n  card.overview.push({\n         \"card\": {\n            \"type\" : \"ACTION2\",\n            \"heading\" : \"Sync Stopped\",\n            \"listContent\": [],\n            \"icon\" : \"WARN\",\n              \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\":{\n                     \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":formula.ActiveCampaignSyncRunSetup.instance\n                       },\n                    \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n\n                      }\n                    }\n                  }\n                }\n              ]\n         },\n         \"id\" : \"overview\",\n         \"isCardDone\":\"true\"\n     });\n}\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":260189,"onSuccess":["ChargebeePostUpdateTpIntegConfWithIgnoreFlag"],"onFailure":[],"name":"modifyConfig","type":"script","properties":{"body":"let configuration=steps.ChargebeeGetTpIntegConf.data.config_json;\nconfiguration.cloudElements.formula.sync.ignoreAll=\"true\";\nlet totalRecordsSynced=steps.InputParams.mainTrigger.request.query['totalRecordsSynced'];\n\nif(totalRecordsSynced !==undefined){\nconfiguration.cloudElements.formula.sync.totalRecordsSynced=totalRecordsSynced;\n}\n\nlet tpConfigUpdateParams = steps.InputParams.updateTpConfigParams;\ntpConfigUpdateParams.body.config_json = configuration;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});"}},{"id":260190,"onSuccess":["ChargebeePostCreateNewSyncDetails"],"onFailure":[],"name":"NewSyncDetails","type":"script","properties":{"body":"let configJson = steps.ConfigParams.config_json;\n\nlet payload = {\n  apiKey: steps.InputParams.input.apiKey,\n  siteName: steps.InputParams.input.siteName,\n  siteDomain: steps.InputParams.input.siteDomain,\n  type: steps.InputParams.input.type,\n  url : \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/api/v2/third_party_sync_details\",\n  headers: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n  },\n  query: {\n    'third_party_configuration[integration_name]': steps.InputParams.input.type,\n    \"context\": {\n        \"excecutionId\":steps.StartExcecution.response.body[0].id,\n        \"instance\":configJson.cloudElements.formula.sync.instance,\n        \"formula\":configJson.cloudElements.formula.sync.id,\n        \"initialSync\":false,\n         \"syncData\" :{ \n           syncStart : Math.round((new Date().getTime())/1000)\n         }\n      }\n  }\n};\n\n\ndone({\n  payload: payload\n});"}},{"id":260191,"onSuccess":["checkList"],"onFailure":[],"name":"payload","type":"script","properties":{"body":"done({\nbody:{\n  apiKey: steps.InputParams.input.apiKey,\n  siteName: steps.InputParams.input.siteName,\n  type: steps.InputParams.input.type,\n  siteDomain: steps.InputParams.input.siteDomain,\n  isFullSync: true\n},\n  mappingHeader :  {\n      \"Elements-Formula-Instance-Id\": steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.mapping.instance\n  },\n    query:JSON.stringify({\n      checkList:true\n    })\n});\n\n"}},{"id":260192,"onSuccess":["ChargebeePostUpdateSyncRunning"],"onFailure":[],"name":"RunSyncParam","type":"script","properties":{"body":"let body=steps.ChargebeePostCreateNewSyncDetails.data.third_party_sync_detail;\nlet syncStatus = steps.ChargebeeGetLastSyncDetails.data;\n\nif(syncStatus && syncStatus.context.syncData !== undefined){\n  if(syncStatus.status === \"failed\"){\n    body.context.syncData.previousSyncStart = syncStatus.context.syncData.previousSyncStart;\n    body.context.syncData.previousSyncEnd = syncStatus.context.syncData.previousSyncEnd;\n  }\n  else{\n    body.context.syncData.previousSyncEnd = syncStatus.context.syncData.syncEnd || undefined;\n    body.context.syncData.previousSyncStart = syncStatus.context.syncData.syncStart || undefined;\n  }\n}\n\nlet input = {\n  apiKey: steps.InputParams.input.apiKey,\n  siteName: steps.InputParams.input.siteName,\n  siteDomain: steps.InputParams.input.siteDomain,\n  type: steps.InputParams.input.type,\n  error : false,\n  done: false,\n  url : \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.ChargebeePostCreateNewSyncDetails.data.third_party_sync_detail.id,\n  headers: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n  },\n  query: body,\n};\n\ninput.query.status = \"running\";\ndone(input);"}},{"id":260193,"onSuccess":[],"onFailure":[],"name":"SendErrorCard","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\nlet totalRecordsSynced = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.sync.totalRecordsSynced;\n\n\nif (totalRecordsSynced === undefined) {\n   totalRecordsSynced = 0;\n}\n\nlet flag = false;\nlet selectedListId = formula.mapping.inputs.list;\nlet lists = steps.CheckError.response.body.lists;\nlet statusCode = steps.CheckError.response.body.code;\n\nif (lists !== undefined && lists[selectedListId] === undefined) {\n   flag = true;\n}\nlet card = {\n   \"icon\": \"/third_party/cn-xero.png\",\n   \"unlink\": steps.InputParams.input.unlink,\n   \"syncErrors\": [\n      {\n         \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"No errors found\",\n            \"icon\": \"WARNING\"\n         },\n         \"id\": \"sync_errors\",\n         \"isCardDone\": \"false\"\n      }\n   ],\n   \"overview\": [{\n      \"card\": {\n         \"type\": \"ACTION2\",\n         \"id\": \"check2\",\n         \"icon\": \"ERROR\",\n         \"heading\": \"Error\",\n         \"subHeading\": \"An issue was encountered due to which the sync did not succeed. Please retry sync and if the issue still persists, contact support\",\n         \"buttons\": [\n            {\n               \"id\": \"sync\",\n               \"display\": \"Sync now\",\n               \"icon\": \"AUTO_RENEW\",\n               \"type\": \"DIRECT_LINK\",\n               \"buttonLook\": \"EMPTY\",\n               \"request\": {\n                  \"type\": \"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                     \"apiUrl\": url + \"/sync/run\",\n                     \"type\": \"GET\",\n                     \"headers\": {\n                        \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                     },\n                     \"input\": {\n                        \"type\": steps.InputParams.input.type,\n                        \"siteDomain\": steps.InputParams.input.siteDomain,\n                        \"api-key\": steps.InputParams.input.apiKey,\n                        \"site-name\": steps.InputParams.input.siteName,\n                        \"syncNow\": \"syncNow\"\n\n                     }\n                  }\n               }\n            }\n         ]\n\n      },\n      \"id\": \"overview\",\n      \"isCardDone\": \"true\"\n   }]\n}\n\nif (statusCode === 403) {\n   card.overview[0].card.heading = \"ActiveCampaign key has been expired\";\n   card.overview[0].card.subHeading = totalRecordsSynced + \" customers and subscriptions synced with ActiveCampaign\";\n   card.overview[0].card.message = {\n      \"message\": \"Looks like your ActiveCampaign key  is expired. Please resolve this for the sync to resume.\",\n      \"button\": {\n         \"display\": \"Resolve\",\n         \"icon\": \"ARROW\",\n         \"id\": \"errors\",\n         \"type\": \"POP_UP\",\n         \"requestType\": \"authexpiry\",\n         \"popUp\": {\n            \"inputFields\": [\n               {\n                  \"dispName\": \"Base Url\",\n                  \"req\": \"true\",\n                  \"type\": \"TEXT\",\n                  \"id\": \"text\",\n                  \"placeholder\": \"EG: ABC.ACTIVEHOSTED.COM \"\n               },\n               {\n                  \"dispName\": \"API Secret\",\n                  \"req\": \"true\",\n                  \"type\": \"PASSWORD\",\n                  \"id\": \"password\",\n                  \"placeholder\": \"eg: 1233asfsdf23434343434\"\n               },\n               {\n                  \"req\": \"true\",\n                  \"type\": \"CHECKBOX\",\n                  \"id\": \"checkbox1\",\n                  \"desc\": \"I understand that, ActiveCampaign may store my customer and subscription data. (Please refer to ActiveCampaign's <a href='https://www.activecampaign.com/terms-of-service'>Terms of Service</a>, <a href='https://www.activecampaign.com/consent-policy'>Consent policy</a> and <a href='https://www.activecampaign.com/privacy-policy'>Privacy policy</a>).\"\n               }\n            ],\n            \"message\": {\n               \"message\": \"You can get your Base URL and API secret from ActiveCampaign by navigating to Settings > Developer\"\n            },\n            \"title\": \"Connect to ActiveCampaign\",\n            \"submitButton\": \"Connect\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"Specify your ActiveCampaign Base URL and API secret\",\n            \"advance\": \"true\",\n            \"type\": \"INPUT\",\n            \"apiEndPoint\": {\n               \"apiUrl\": url + \"/create\",\n               \"type\": \"GET\",\n               \"headers\": {\n                  \"Elements-Formula-Instance-Id\": formula.activeCampaignCreateSetup.instance\n               },\n               \"input\": {\n                  \"type\": steps.InputParams.input.type,\n                  \"siteDomain\": steps.InputParams.input.siteDomain,\n                  \"formulaCreate\": formula.create.instance,\n                  \"isReauthenticate\": true\n\n               }\n            }\n         }\n\n      }\n   }\n   card.overview[0].card.message.icon = \"DANGER_INFO\";\n   card.overview[0].card.message.messageLook = \"DANGER\";\n\n\n\n}\nif (statusCode === 404 || flag === true) {\n   card.overview[0].card.heading = \"List unavailable in ActiveCampaign\";\n   card.overview[0].card.subHeading = totalRecordsSynced + \" customers and subscriptions synced with ActiveCampaign\";\n\n   card.overview[0].card.message = {\n      \"message\": \"Looks like the list in ActiveCampaign has been deleted. Please resolve this for the sync to resume.\",\n      \"button\": {\n         \"display\": \"Resolve\",\n         \"icon\": \"ARROW\",\n         \"id\": \"resolve\",\n         \"type\": \"EDIT_STEP\",\n         \"editConfig\": {\n            \"integration\": \"activecampaign\",\n            \"stepId\": \"step_2\",\n            \"apiEndPoint\": {\n               \"type\": \"GET\",\n               \"apiUrl\": \"https://raw.githubusercontent.com/cb-Vinothini/ipaas_local/master/edit_mapping_step.json\",\n               \"headers\": {\n                  \"Elements-Formula-Instance-Id\": formula.activeCampaignMappingSetup.instance\n               },\n               \"input\": {\n                  \"type\": steps.InputParams.input.type,\n                  \"siteDomain\": steps.InputParams.input.siteDomain,\n                  \"api-key\": steps.InputParams.input.apiKey,\n                  \"site-name\": steps.InputParams.input.siteName,\n                  \"resolveButtonAction\": true,\n                  \"op\": \"edit\"\n\n\n               }\n            }\n         }\n\n      }\n   }\n   card.overview[0].card.message.icon = \"DANGER_INFO\";\n   card.overview[0].card.message.messageLook = \"DANGER\";\n}\n\ndone({\n   statusCode: 200,\n   result: card\n});\n\n"}},{"id":260194,"onSuccess":[],"onFailure":[],"name":"sendErrorCard-IntegrationError","type":"script","properties":{"body":"let url= steps.ChargebeeGetTpIntegConf.data.third_party_configuration.config_json.cloudElements.url;\nlet formula= steps.ChargebeeGetTpIntegConf.data.third_party_configuration.config_json.cloudElements.formula;\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": steps.InputParams.input.unlink,\n    \"syncErrors\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \" \",\n            \"icon\": \"WARNING\",\n            \"listActionContent\":[]\n        },\n         \"id\" : \"sync_errors\",\n      \"isCardDone\":\"true\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"id\": \"check2\",\n            \"icon\" : \"ERROR\"   ,\n            \"heading\": \"Error\",\n            \"subHeading\": \"An issue was encountered due to which the sync did not succeed. Please retry sync and if the issue still persists, contact support\",\n                 \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\": {\n                \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"api-key\": steps.InputParams.input.apiKey,\n                    \"site-name\": steps.InputParams.input.siteName,\n                    \"syncNow\": \"syncNow\"\n                   \n                }\n            }\n                  }\n                }\n              ]\n           \n        },\n         \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    }]\n};\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":260195,"onSuccess":["UpdateTpConfigParams"],"onFailure":["sendErrorCard-IntegrationError"],"name":"sendErrorMail","type":"httpRequest","properties":{"method":"POST","url":"${steps.InputParams.input.errorEmailEndpoint}","headers":"${steps.InputParams.input.authHeader}","query":"${steps.sendErrorMailParams.params}"}},{"id":260196,"onSuccess":["sendErrorMail"],"onFailure":[],"name":"sendErrorMailParams","type":"script","properties":{"body":"let payload = {\n  content : \"Integration Error, Formula-Name: ActiveCampaignSync, Formula-Instance-ID : \" + steps.ConfigParams.config_json.cloudElements.formula.sync.instance,\n  subject : \"Fatal Error Occurred during \" + steps.InputParams.input.type + \" FullSync\",\n  to_address : steps.InputParams.input.errorEmailAddress,\n  api_key : steps.InputParams.input.apiKey\n}\n\n\nlet authHeader = {\n  Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + \"\")\n};\n\ndone({\n  params: payload,\n  authHeader: authHeader\n});"}},{"id":260197,"onSuccess":[],"onFailure":[],"name":"SendLastSyncDetails","type":"script","properties":{"body":"let ignoreIndexArray = [];\nlet url= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet configuration = steps.ChargebeeGetTpIntegConf.data.config_json;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\nlet successLength = (formula.sync.totalRecordsSynced !== undefined) ? formula.sync.totalRecordsSynced : 0;\n\nlet errorRecord =  (steps.constructErrorLogList.errorRecord !== undefined) ? steps.constructErrorLogList.errorRecord : [];\n\nif(steps.ChargebeePostUpdateTpIntegConfWithIgnoreIndex !== undefined){\n  ignoreIndexArray = steps.updateIgnoreIndex.tpConfigUpdateParams.body.config_json.cloudElements.formula.sync.ignoreIndexArray;\n}\nelse{ \n  ignoreIndexArray = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.sync.ignoreIndexArray;\n}\n\nlet syncStatus = steps.ChargebeeGetLastSyncDetails.data;\nlet fileId = steps.ConfigParams.config_json.cloudElements.chargebee.s3linkforFullsyncError;\nlet ignoreAll = steps.InputParams.input.ignoreAll;\nlet ignoreIndex = steps.InputParams.input.ignoreIndex;//index to be ignore\n\nlet errlist = (steps.constructErrorLogList.listContent !== undefined) ? steps.constructErrorLogList.listContent : [];//error list from s3 link\n\nif(ignoreIndexArray !== undefined){\n  ignoreIndexArray.sort( (a, b)  =>  b-a); //for descending sort\n  for(var i = 0; i < ignoreIndexArray.length; ++i){\n    errlist.splice( ignoreIndexArray[i], 1);\n  }\n}else{\n  ignoreIndexArray = [];\n}\n\nlet unlink = steps.InputParams.input.unlink;\nunlink.popUp.apiEndPoint.headers[\"Elements-Formula-Instance-Id\"] = formula.ActiveCampaignUnlinkSetup.instance;\n\nlet failedRecords = errorRecord.length - ignoreIndexArray.length ;\nlet card = {\n \n    \n    \"icon\": \"/third_party/cn-xero.png\",\n    \"unlink\": unlink,\n   \"syncErrors\":[\n    {\n      \"card\": {\n        \"type\" : \"ACTION3\",\n        \"heading\" : (failedRecords === 0 ? \"No\" : failedRecords)  + \" errors found  \",\n        \"listActionContent\":errlist,\n          \"buttons\":[\n             {      \n        \"display\": \"Download CSV\",       \n        \"icon\": \"CLOUD_DOWNLOAD\",         \n        \"id\": \"download\",       \n        \"fileId\": fileId,           \n        \"type\": \"DOWNLOAD_FILE\"         \n             },\n          {\n            \"id\":\"confirmation\",\n            \"display\" : \"IGNORE ALL\",\n            \"buttonLook\":\"EMPTY\",\n            \"icon\" : \"CLOSE\",\n            \"type\" : \"POP_UP\",\n            \"popUp\":{\n              \"type\":\"SIMPLE\",\n              \"title\":\"Are you sure you want to ignore the errors?\",\n              \"submitButton\":\"Yes, go ahead\",\n              \"cancelButton\":\"Dismiss\",\n              \"usecase\":\"DANGER\",\n              \"description\":\"Subscription data of these customers will not be synced with ActiveCampaign\",\n              \"apiEndPoint\":{\n                \"apiUrl\":url+\"/sync/run\",\n                \"headers\": {\n                      \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                      },\n                        \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"ignoreAll\": \"true\",\n                       \"totalRecordsSynced\":syncStatus.context.syncData.success\n                      \n                      },\n                \"type\":\"GET\"\n              }\n            }\n          }\n        ]\n          \n          },\n      \n            \"id\" : \"sync_errors\",\n      \"isCardDone\":\"false\"\n    }],\n    \"overview\": [{\n        \"card\": {\n            \"type\": \"ACTION2\",\n            \"heading\": \" \",\n            \"subHeading\": \" \",\n            \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\":{\n                     \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                       },\n                    \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n\n                      }\n                    }\n                  }\n                }\n              ],\n        },\n        \"id\": \"overview\",\n        \"isCardDone\": \"true\"\n    \n    }]\n    \n};\n\n/*\nTo calculate last sync time\n*/\n\nlet currentTime =  Math.round((new Date().getTime())/1000);\nlet syncStart = syncStatus.context.syncData.syncEnd;\nif(syncStart===undefined){\n syncStart=syncStatus.context.syncData.previousSyncEnd;\n}\n\nif(syncStart===undefined){\n syncStart=syncStatus.context.syncData.syncStart;\n}\n\nif(syncStart === undefined){\n  syncStart = currentTime;\n}\n\nlet time = Math.round((currentTime-syncStart)/60);\n\n  if(time > 60){\n    let hours = Math.round(time/60);\n    let minutes = time % 60;\n    if(hours < 24){\n    card.overview[0].card.heading = \"Last sync done \"+hours+\" Hours and \"+minutes+\" Minutes ago\";\n    }else{\n      let days = Math.round(time/(24*60));\n      hours = Math.round((time % (24*60))/60);\n      minutes = time % 60;\n           card.overview[0].card.heading = \"Last sync done \"+days+\" days \"+(hours !== 0 ? hours + \" Hours\":\"\" )+\" and \"+minutes+\" Minutes ago\";\n      \n    }\n  }else{\n    card.overview[0].card.heading = \"Last sync done \" + time + \" Minutes ago \"\n  }\n\n\n\nif(syncStatus.status===\"succeeded\") {\n  card.overview[0].card.subHeading = successLength + \"  customers and subscriptions synced with ActiveCampaign\";\n                  \n                \n\n  if(errorRecord.length > 0) {\n    card.overview[0].card.message = {\n                      \"message\": (errorRecord.length - ignoreIndexArray.length)  + \" customers and subscriptions could not be synced to ActiveCampaign\",\n                      \"button\": {\n                          \"id\": \"errors\",\n                          \"display\": \"See all errors\",\n                          \"icon\": \"ARROW\",\n                          \"type\": \"TAB_CHANGE\",\n                       \n                        }\n                    }\n    card.overview[0].card.message.icon = \"WARNING\";\n    card.overview[0].card.message.messageLook = \"WARN\";\n  }\n}\nelse {\n   card.overview[0].card.subHeading = successLength + \"  customers and subscriptions synced with ActiveCampaign\";\n                  \n                  \n\n  if(errorRecord.length > 0) {\n    card.overview[0].card.message = {\n                      \"message\": errorRecord.length  + \" customers and subscriptions could not be synced to ActiveCampaign\",\n                      \"button\": {\n                          \"id\": \"errors\",\n                          \"display\": \"See all errors\",\n                          \"icon\": \"ARROW\",\n                          \"type\": \"TAB_CHANGE\",\n                       \n                        }\n                    }\n    card.overview[0].card.message.icon = \"WARNING\";\n    card.overview[0].card.message.messageLook = \"WARN\";\n  }\n  \n}\n\nif(failedRecords === 0){\n  card.syncErrors =  [\n    {\n      \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \"No errors found\",\n            \"icon\" : \"WARNING\"\n         },\n      \"id\": \"sync_errors\",\n      \"isCardDone\": \"false\"\n    }\n  ]\n}\n\nif(formula.sync.execution.result.syncStatus === \"stopped\"){\n  card.overview.push({\n         \"card\": {\n            \"type\" : \"ACTION2\",\n            \"heading\" : \"Sync Stopped\",\n            \"listContent\": [],\n            \"icon\" : \"WARN\",\n              \"buttons\" :[\n              {\n                \"id\":\"sync\",\n                \"display\" : \"Sync now\",\n                \"icon\" : \"AUTO_RENEW\",\n                \"type\" : \"DIRECT_LINK\",\n                \"buttonLook\":\"EMPTY\",\n                \"request\":{\n                  \"type\":\"ON_CLICK_GET_CARD\",\n                  \"apiEndPoint\":{\n                     \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                       },\n                    \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n\n                      }\n                    }\n                  }\n                }\n              ]\n         },\n         \"id\" : \"overview\",\n         \"isCardDone\":\"true\"\n     });\n}\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":260198,"onSuccess":[],"onFailure":[],"name":"SendLastSyncDetailsIgnore","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet syncStatus = steps.ChargebeeGetLastSyncDetails.data;\nlet configuration = steps.ChargebeeGetTpIntegConf.data.config_json;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\nlet unlink = steps.InputParams.input.unlink;\nunlink.popUp.apiEndPoint.headers[\"Elements-Formula-Instance-Id\"] = formula.ActiveCampaignUnlinkSetup.instance;\nlet totalRecordsSynced = formula.sync.totalRecordsSynced;\nlet hours,minutes;\n\nlet cur =  Math.round((new Date().getTime())/1000);\nlet syncStart = syncStatus.context.syncData.syncEnd;\nif(syncStart === undefined){\n syncStart = syncStatus.context.syncData.previousSyncEnd;\n}\n\nif(syncStart === undefined){\n syncStart = syncStatus.context.syncData.syncStart;\n}\n\nif(syncStart === undefined){\n  syncStart = cur;\n}\n\n\nlet time = Math.round((cur-syncStart)/60);\n\nlet card =\n{\n  \"icon\": \"/third_party/cn-xero.png\",\n  \"unlink\": unlink,\n  \"overview\": [\n    {\n      \"card\": {\n            \"type\" : \"ACTION2\",\n        \"subHeading\": totalRecordsSynced +\" customers and subscriptions synced with ActiveCampaign\",\n            \"icon\" : \"WARNING\",\n          \"buttons\": [\n          {\n            \"buttonLook\": \"EMPTY\",\n            \"display\": \"Sync now\",\n            \"icon\": \"AUTO_RENEW\",\n            \"id\": \"sync\",\n            \"request\": {\n                 \"apiEndPoint\": {\n                \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"api-key\": steps.InputParams.input.apiKey,\n                    \"site-name\": steps.InputParams.input.siteName,\n                    \"syncNow\": \"syncNow\"\n\n                }\n            },\n              \"type\": \"ON_CLICK_GET_CARD\"\n            },\n            \"type\": \"DIRECT_LINK\"\n          }\n        ]\n         },\n      \"id\": \"overview\",\n      \"isCardDone\": \"true\"\n    }\n  ],\n  \"syncErrors\": [\n    {\n      \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \"You've ignored errors found during Sync.\",\n            \"icon\" : \"WARNING\"\n         },\n      \"id\": \"sync_errors\",\n      \"isCardDone\": \"false\"\n    }\n  ]\n};\n\n  if(time > 60){\n    let hours = Math.round(time/60);\n    let minutes = time % 60;\n    if(hours < 24){\n    card.overview[0].card.heading = \"Last sync done \"+hours+\" Hours and \"+minutes+\" Minutes ago\";\n    }else{\n      let days = Math.round(time/(24*60));\n      hours = Math.round((time % (24*60))/60);\n      minutes = time % 60;\n           card.overview[0].card.heading = \"Last sync done \"+days+\" days \"+(hours !== 0 ? hours + \" Hours\":\"\" )+\" and \"+minutes+\" Minutes ago\";\n      \n    }\n  }else{\n    card.overview[0].card.heading = \"Last sync done \" + time + \" Minutes ago \";\n  }\n\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":260199,"onSuccess":[],"onFailure":[],"name":"SendProcessCard","type":"script","properties":{"body":"let formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\nlet url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\n\nlet card = {\n    \"icon\": \"/third_party/cn-xero.png\",\n   \n    \"syncErrors\": [\n    {\n      \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \"No errors found\",\n            \"icon\" : \"WARNING\"\n         },\n      \"id\": \"sync_errors\",\n      \"isCardDone\": \"false\"\n    }\n  ],\n    \"overview\": [{\n        \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Syncing all customers and their subscriptions\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": url +\"/sync/run\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                        },\n                        \"input\":{\n                            \"apiKey\": steps.InputParams.input.apiKey,\n                            \"siteName\": steps.InputParams.input.siteName,\n                            \"type\": steps.InputParams.input.type,\n                            \"siteDomain\": steps.InputParams.input.siteDomain\n                        }\n                        \n               }\n            }\n         },\n          \"id\":\"overview\",\n    \"isCardDone\":\"false\"\n         \n    }],\n    \n     \"unlink\": {\n    \"buttonLook\": \"MUTTED\",\n    \"display\": \"Unlink Integration\",\n    \"id\": \"unlink\",\n    \"popUp\": {\n      \"apiEndPoint\": {\n        \"apiUrl\": url+\"/unlink\",\n        \"headers\": {\n          \"Elements-Formula-Instance-Id\":  formula.ActiveCampaignUnlinkSetup.instance\n        },\n        \"input\": {\n          \"type\": \"activecampaign\"\n        },\n        \"type\": \"GET\"\n      },\n      \"cancelButton\": \"Dismiss\",\n      \"description\": \"This will remove all the configuration details such as login authentication, configurations mapping etc. If you want to sync again, you will have to start the sync process from the beginning.\",\n      \"submitButton\": \"Unlink\",\n      \"title\": \"Do you really want to unlink the integration?\",\n      \"type\": \"SIMPLE\"\n    },\n    \"type\": \"POP_UP\"\n  }\n};\n\n\n\ndone({\n statusCode: 200,\n result: card\n})"}},{"id":260200,"onSuccess":["NewSyncDetails"],"onFailure":[],"name":"StartExcecution","type":"request","properties":{"method":"POST","api":"/formulas/instances/${steps.ConfigParams.config_json.cloudElements.formula.sync.instance}/executions","body":"${steps.ConfigParams.body}","query":""}},{"id":260201,"onSuccess":["ConstructLog"],"onFailure":[],"name":"SuccessList","type":"script","properties":{"body":"let details = steps.GetTPSuccessDetails.response.body.list;\nlet list = [];\nif(steps.SuccessList !== undefined){\n  list = steps.SuccessList.list;\n}\n\nif(details.length !== 0){\n  if(list.length === 0){\n    list = details;\n  }else{\n    list = list.concat(details);\n  }\n}\n\ndone({list : list});\n\n"}},{"id":260202,"onSuccess":["StartExcecution"],"onFailure":["payload"],"name":"SyncAgain","type":"filter","properties":{"body":"let formula = steps.ConfigParams.config_json.cloudElements.formula;\nlet ignoreAll = steps.InputParams.input.ignoreAll;\n\n\nif(formula.sync.authFailed === true || formula.mapping.isListChanged === true){\n  done(true);\n}\n\nif(ignoreAll !== undefined ){\n  done(false);\n}\n\n\nif(steps.InputParams.input.syncNow ===\"default\" && steps.ConfigParams.config_json.cloudElements.formula.sync.firstFullSync === true && steps.ConfigParams.config_json.cloudElements.formula.sync.isFirstFullsyncFailed === undefined) {\n  done(true);\n}else if(steps.InputParams.input.syncNow ===\"syncNow\"){\n  done(true);\n}else{\n  done(false);\n}\n\n\n"}},{"id":260203,"onSuccess":["constructErrorList"],"onFailure":[],"name":"TpData","type":"script","properties":{"body":"let errorLog = [];\nlet list = steps.ChargebeeGetTpEntityMapping.data.list;\n\nif(list === undefined) {\n  list = [];\n}\n\nfor(var i=0;i<list.length;i++){\n  let tp = list[i].third_party_entity_mapping;\n  if(tp !== undefined) {\n    if(tp.status === \"update_failed\"){\n       errorLog.push(tp.error_message);\n  }\n  }\n}\n\ndone({\n  errorLog:errorLog\n});\n"}},{"id":260204,"onSuccess":["ChargebeeGetTpEntityMapping"],"onFailure":[],"name":"TPMappingParam","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.type;\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.ChargebeeGetLastSyncDetails.data;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements;\n\nstartTime = syncStaus.context.syncData.syncStart;\nendTime = formula.lastSyncTime;\n  \nlet params = {\n  url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n  headers: {\n      Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n  },\n  query: {\n      integration_name: type,\n      \"modified_at[after]\": startTime,\n      \"status[is]\": \"update_failed\",\n      limit: 20\n  },\n  apiKey: apiKey,\n  siteName: siteName,\n  siteDomain: siteDomain,\n  type: type\n};\n\ndone({ params: params });\n"}},{"id":260205,"onSuccess":["ConstructLog"],"onFailure":[],"name":"TPSuccessDetailsParam","type":"script","properties":{"body":"let params = steps.GetThirdPartyConfigParams.params.input;\nparams.config.query['status[is]'] = \"synced\";\n\nif(steps.TPSuccessDetailsParam !== undefined){\n  params.config.query.offset = steps.GetTPSuccessDetails.response.body.next_offset;\n}\n\ndone({params: params});"}},{"id":260206,"onSuccess":["SendLastSyncDetailsIgnore"],"onFailure":["sendErrorCard-IntegrationError"],"name":"UpdateConfigWithIgnoreFlag","type":"httpRequest","properties":{"method":"POST","body":"${steps.modifyConfig.body}","url":"${steps.modifyConfig.url}","headers":"${steps.modifyConfig.headers}","query":""}},{"id":260207,"onSuccess":["SendLastSyncDetails"],"onFailure":[],"name":"updateConfigWithIgnoreIndex","type":"httpRequest","properties":{"method":"POST","body":"${steps.updateIgnoreIndex.query}","url":"${steps.updateIgnoreIndex.url}","headers":"${steps.updateIgnoreIndex.headers}","query":""}},{"id":260208,"onSuccess":["ChargebeePostUpdateTpIntegConfWithIgnoreIndex"],"onFailure":[],"name":"updateIgnoreIndex","type":"script","properties":{"body":"let apiKey=steps.InputParams.input.apiKey;\nlet siteDomain=steps.InputParams.input.siteDomain;\nlet siteName=steps.InputParams.input.siteName;\nlet type=steps.InputParams.input.type;\n\nlet ignoreIndex=steps.InputParams.input.ignoreIndex;//index to be ignore\nlet configuration=steps.ChargebeeGetTpIntegConf.data.config_json;\nlet indexArray=[];\n\nif(configuration.cloudElements.formula.sync.ignoreIndexArray===undefined){\n  configuration.cloudElements.formula.sync.ignoreIndexArray=[];\n}else{\n  indexArray=configuration.cloudElements.formula.sync.ignoreIndexArray;\n  indexArray.push(Number(ignoreIndex));\n  configuration.cloudElements.formula.sync.ignoreIndexArray=indexArray;\n}\n\nlet tpConfigUpdateParams = steps.InputParams.updateTpConfigParams;\ntpConfigUpdateParams.body.config_json = configuration;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});\n\n\n"}},{"id":260209,"onSuccess":["UpdateTPParams"],"onFailure":["ConfigErrorCard"],"name":"UpdateRunSync","type":"httpRequest","properties":{"method":"POST","url":"${steps.RunSyncParam.url}","headers":"${steps.InputParams.input.config.auth}","query":"${steps.RunSyncParam.body}"}},{"id":260210,"onSuccess":["constructErrorList"],"onFailure":[],"name":"UpdateStatus","type":"script","properties":{"body":"let successRecord = steps.GetTpConfiguration.response.body.third_party_configuration.config_json.cloudElements.formula.sync.totalRecordsSynced || 0;\nlet errorRecord = steps.TpData.errorLog.length || 0;\nlet input = steps.LastSyncDetails.response.body.third_party_sync_detail;\nlet total = successRecord+errorRecord;\n\nif(input.context === undefined) {\n  input.context = {\n    \"syncData\": {}\n  };\n}\n\ninput.status = \"succeeded\";\ninput.context.sync_context_messages = [ total +\" Customers processed (\"+successRecord+\" created, 0 updated, \"+errorRecord+\" not synced)\"];\n  input.context.syncData.total= total;\n  input.context.syncData.success = successRecord;\n  input.context.syncData.failed = errorRecord;\n  input.context.syncData.syncEnd = Math.round((new Date().getTime())/1000);\n  input.context.initialSync = false\n\ndone({input:input});"}},{"id":260211,"onSuccess":["sendErrorMailParams"],"onFailure":["sendErrorCard-IntegrationError"],"name":"UpdateSyncError","type":"httpRequest","properties":{"method":"POST","url":"${steps.CheckStatus.url}","headers":"${steps.CheckStatus.auth}","query":"${steps.CheckStatus.body}"}},{"id":260212,"onSuccess":["constructErrorList"],"onFailure":[],"name":"UpdateSyncSuccess","type":"httpRequest","properties":{"method":"POST","url":"${steps.CheckStatus.url}","headers":"${steps.CheckStatus.auth}","query":"${steps.UpdateStatus.input}"}},{"id":260213,"onSuccess":["SendProcessCard"],"onFailure":[],"name":"UpdateTpConfig","type":"httpRequest","properties":{"method":"POST","body":"${steps.UpdateTPParams.tpConfigUpdateParams.body}","url":"${steps.UpdateTPParams.tpConfigUpdateParams.url}","headers":"${steps.UpdateTPParams.tpConfigUpdateParams.headers}"}},{"id":260214,"onSuccess":["getErrorReasonPayload"],"onFailure":[],"name":"UpdateTPConfig2","type":"httpRequest","properties":{"method":"POST","body":"${steps.UpdateTpConfigParams.body}","url":"${steps.UpdateTpConfigParams.url}","headers":"${steps.UpdateTpConfigParams.headers}"}},{"id":260215,"onSuccess":["ChargebeePostUpdateTpIntegConf_2"],"onFailure":[],"name":"UpdateTpConfigParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet siteName = steps.InputParams.input.siteName;\nlet type = steps.InputParams.input.type;\nlet password = \"\";\nlet configuration = steps.ChargebeeGetTpIntegConf.data.config_json;\n\nif(steps.ConfigParams.config_json.cloudElements.formula.sync.firstFullSync === true){\n  configuration.cloudElements.formula.sync.isFirstFullsyncFailed = true;\n}\n\nlet tpConfigUpdateParams = steps.InputParams.updateTpConfigParams;\ntpConfigUpdateParams.body.config_json = configuration;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});\n\n\n\n"}},{"id":260216,"onSuccess":["ChargebeePostUpdateTpIntegConf"],"onFailure":[],"name":"UpdateTPParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.type;\nlet password = \"\";\nlet configuration = steps.ChargebeeGetTpIntegConf.data.config_json;\n\nconfiguration.batch.status = \"running\";\n\nlet tpConfigUpdateParams = steps.InputParams.updateTpConfigParams;\ntpConfigUpdateParams.body.config_json = configuration;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});"}},{"id":261485,"onSuccess":["ChargebeePostUpdateSyncSuccess"],"onFailure":[],"name":"UpdateTpSyncSuccessParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.type;\nlet password = \"\";\nlet configuration = steps.ChargebeeGetTpIntegConf_2.data.config_json;\n\nconfiguration.batch.status = \"succeeded\";\n\nlet tpConfigUpdateParams = steps.InputParams.updateTpConfigParams;\ntpConfigUpdateParams.body.config_json = configuration;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});"}}],"triggers":[{"id":28684,"onSuccess":["InputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"subFormulas":[{"id":31257,"name":"ChargebeeGet","userId":27893,"accountId":24428,"createdDate":"2019-11-12T11:30:28Z","steps":[{"id":245638,"onSuccess":["ChargebeeGetCBDelay2"],"onFailure":["ChargebeeGetResult"],"name":"ChargebeeGetCallAgainCB","type":"filter","properties":{"body":"//done(false); //Since delay causing 30 second limit issues\n\n\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetCBData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"}},{"id":245636,"onSuccess":["ChargebeeGetCBDelay"],"onFailure":["ChargebeeGetResult2"],"name":"ChargebeeGetCallAgainHttp","type":"filter","properties":{"body":"done(false); //Since delay causing 30 second limit issues\n\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetHttpData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"}},{"id":245637,"onSuccess":["ChargebeeGetGetHttpData"],"onFailure":[],"name":"ChargebeeGetCBDelay","type":"httpRequest","properties":{"method":"GET","url":"${steps.ChargebeeGetInputParams.delay.url}","query":"${steps.ChargebeeGetInputParams.delay.query}","headers":"${steps.ChargebeeGetInputParams.delay.headers}"}},{"id":245639,"onSuccess":["ChargebeeGetGetCBData"],"onFailure":[],"name":"ChargebeeGetCBDelay2","type":"httpRequest","properties":{"method":"GET","url":"${steps.ChargebeeGetInputParams.delay.url}","headers":"${steps.ChargebeeGetInputParams.delay.headers}","query":"${steps.ChargebeeGetInputParams.delay.query}"}},{"id":244768,"onSuccess":[],"onFailure":[],"name":"ChargebeeGetError","type":"script","properties":{"body":"done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"}},{"id":244769,"onSuccess":["ChargebeeGetCallAgainCB"],"onFailure":["ChargebeeGetCallAgainCB"],"name":"ChargebeeGetGetCBData","type":"elementRequest","properties":{"method":"GET","acceptableStatusCodes":"200-600","api":"${steps.ChargebeeGetInputParams.url}","elementInstanceId":"${config.chargebee}","body":"","headers":"${steps.ChargebeeGetInputParams.headers}","query":"${steps.ChargebeeGetInputParams.query}"}},{"id":244774,"onSuccess":["ChargebeeGetCallAgainHttp"],"onFailure":["ChargebeeGetCallAgainHttp"],"name":"ChargebeeGetGetHttpData","type":"httpRequest","properties":{"method":"GET","acceptableStatusCodes":"200-600","body":"","url":"${steps.ChargebeeGetInputParams.url}","query":"${steps.ChargebeeGetInputParams.query}","headers":"${steps.ChargebeeGetInputParams.headers}"}},{"id":244764,"onSuccess":["ChargebeeGetIsValidUrl"],"onFailure":[],"name":"ChargebeeGetInputParams","type":"script","properties":{"body":"let url = trigger.args.url;\nlet query = trigger.args.query;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"}},{"id":244771,"onSuccess":["ChargebeeGetGetHttpData"],"onFailure":["ChargebeeGetGetCBData"],"name":"ChargebeeGetIsHttp","type":"filter","properties":{"body":"done(steps.ChargebeeGetInputParams.url.startsWith(\"https://\"));"}},{"id":244767,"onSuccess":["ChargebeeGetIsHttp"],"onFailure":["ChargebeeGetError"],"name":"ChargebeeGetIsValidUrl","type":"filter","properties":{"body":"done(steps.ChargebeeGetInputParams.url !== undefined && steps.ChargebeeGetInputParams.url!== \"\");"}},{"id":244770,"onSuccess":[],"onFailure":[],"name":"ChargebeeGetResult","type":"script","properties":{"body":"if(steps.ChargebeeGetGetCBData.response.code < 300) {\n  done({\n    cb_status:\"success\",\n    cb_code: steps.ChargebeeGetGetCBData.response.code,\n    data:steps.ChargebeeGetGetCBData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetCBData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetCBData.response!== undefined && steps.ChargebeeGetGetCBData.response.body!== undefined && steps.ChargebeeGetGetCBData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetCBData.response.body.error_code;\n    let cbcode = steps.ChargebeeGetGetCBData.response.code || 404;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_code: cbcode,\n    cb_exit:hardstop\n  });\n}\n\n"}},{"id":244775,"onSuccess":[],"onFailure":[],"name":"ChargebeeGetResult2","type":"script","properties":{"body":"if(steps.ChargebeeGetGetHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    cb_code: steps.ChargebeeGetGetHttpData.response.code,\n    data:steps.ChargebeeGetGetHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetHttpData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetHttpData.response.body!== undefined && steps.ChargebeeGetGetHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_code: steps.ChargebeeGetGetHttpData.response.code\n  });\n}\n\n"}}],"triggers":[{"id":27722,"onSuccess":["ChargebeeGetInputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"engine":"v3","active":true,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[{"id":59935,"key":"chargebee","name":"chargebee","type":"elementInstance","required":true}]},{"id":31258,"name":"ChargebeePost","userId":27893,"accountId":24428,"createdDate":"2019-11-12T12:17:49Z","steps":[{"id":245808,"onSuccess":["ChargebeePostCBDelay"],"onFailure":["ChargebeePostResult2"],"name":"ChargebeePostCallAgainHttp","type":"filter","properties":{"body":"done(false);\n//30 seconds limit issue \n\n\nif(steps.ChargebeePostInputParams.intervel.length > 0 && steps.ChargebeePostInputParams.retryCode[steps.ChargebeePostPostHttpData.response.code] !== undefined) {\n  steps.ChargebeePostInputParams.delay.query.delay = steps.ChargebeePostInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"}},{"id":245810,"onSuccess":["ChargebeePostPostHttpData"],"onFailure":[],"name":"ChargebeePostCBDelay","type":"httpRequest","properties":{"method":"GET","url":"${steps.ChargebeePostInputParams.delay.url}","query":"${steps.ChargebeePostInputParams.delay.query}","headers":"${steps.ChargebeePostInputParams.delay.headers}"}},{"id":244779,"onSuccess":[],"onFailure":[],"name":"ChargebeePostError","type":"script","properties":{"body":"done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"}},{"id":244782,"onSuccess":["ChargebeePostIsValidUrl"],"onFailure":[],"name":"ChargebeePostInputParams","type":"script","properties":{"body":"let url = trigger.args.url;\nlet query = trigger.args.query;\nlet body = trigger.args.body;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\nif(body === undefined) {\n  body = {};\n}\ndone({\n    url: url,\n    query: query,\n    body:body,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        501: true,\n        500: true\n        // 403: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true,\n        409: true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"}},{"id":244784,"onSuccess":["ChargebeePostPostHttpData"],"onFailure":["ChargebeePostError"],"name":"ChargebeePostIsValidUrl","type":"filter","properties":{"body":"done(steps.ChargebeePostInputParams.url !== undefined && steps.ChargebeePostInputParams.url!== \"\");"}},{"id":244781,"onSuccess":["ChargebeePostCallAgainHttp"],"onFailure":["ChargebeePostCallAgainHttp"],"name":"ChargebeePostPostHttpData","type":"httpRequest","properties":{"method":"POST","acceptableStatusCodes":"200-600","body":"${steps.ChargebeePostInputParams.body}","url":"${steps.ChargebeePostInputParams.url}","headers":"${steps.ChargebeePostInputParams.headers}","query":"${steps.ChargebeePostInputParams.query}"}},{"id":244786,"onSuccess":[],"onFailure":[],"name":"ChargebeePostResult2","type":"script","properties":{"body":"if(steps.ChargebeePostPostHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeePostPostHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeePostInputParams.hardStop[steps.ChargebeePostPostHttpData.response.code] !== undefined;\n  if(steps.ChargebeePostPostHttpData.response.body!== undefined && steps.ChargebeePostPostHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeePostPostHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_error_body: steps.ChargebeePostPostHttpData.response\n  });\n}\n\n"}}],"triggers":[{"id":27723,"onSuccess":["ChargebeePostInputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"engine":"v3","active":true,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[]}],"method":"GET","uri":"/sync/run","engine":"v1","active":true,"debugLoggingEnabled":true,"singleThreaded":false,"api":"GET /sync/run","configuration":[]}