{"id":32248,"name":"revamped-ActiveCampaignInitialSyncRun","userId":27893,"accountId":24428,"createdDate":"2020-01-08T09:52:04Z","steps":[{"id":260031,"onSuccess":["checkSyncSetupDone"],"onFailure":["EmailParams"],"name":"ChargebeeConfigParams","type":"httpRequest","properties":{"method":"GET","retryDelay":"200","retryAttempts":"5","retryStatusCodes":"429","url":"${steps.InputParams.input.config.url}","retry":"true","headers":"${steps.InputParams.input.config.auth}","query":"${steps.InputParams.input.config.query}"}},{"id":260094,"onSuccess":["isGetIpaasExecutionApiSuccess"],"onFailure":[],"name":"ChargebeeGetIpaasExecutionStatus","type":"formula","properties":{"formulaId":"31257","args":"${steps.executionStatusParams.checkStatusParams}"}},{"id":260091,"onSuccess":["isLastSyncDetailsApiSuccess"],"onFailure":[],"name":"ChargebeeGetLastSyncDetails","type":"formula","properties":{"formulaId":"31257","args":"${steps.InputParams.retrieveLatestSyncConfig}"}},{"id":260099,"onSuccess":["isTpEntityMappingApiSuccess"],"onFailure":[],"name":"ChargebeeGetTpEntityMapping","type":"formula","properties":{"formulaId":"31257","args":"${steps.TPMappingParam.params.config}"}},{"id":260115,"onSuccess":["isTpErrorDetailsFetched"],"onFailure":[],"name":"ChargebeeGetTpErrorDetails","type":"formula","properties":{"formulaId":"31257","args":"${steps.GetThirdPartyConfigParams.params.input}"}},{"id":260085,"onSuccess":["IsTpIntegConfFetched"],"onFailure":[],"name":"ChargebeeGetTpIntegConf","type":"formula","properties":{"formulaId":"31257","args":"${steps.InputParams.getTpConfigParams}"}},{"id":260117,"onSuccess":["isTpSuccessDetailsFetched"],"onFailure":[],"name":"ChargebeeGetTpSuccessDetails","type":"formula","properties":{"formulaId":"31257","args":"${steps.TPSuccessDetailsParam.params}"}},{"id":260102,"onSuccess":["isCreateNewSyncDetailsSuccess"],"onFailure":[],"name":"ChargebeePostCreateNewSyncDetails","type":"formula","properties":{"formulaId":"31258","args":"${steps.NewSyncDetails.payload}"}},{"id":260096,"onSuccess":["isUpdateSuccess_2"],"onFailure":[],"name":"ChargebeePostUpdateSyncFailed","type":"formula","properties":{"formulaId":"31258","args":"${steps.CheckStatus}"}},{"id":260104,"onSuccess":["isUpdateRunSyncSuccess"],"onFailure":[],"name":"ChargebeePostUpdateSyncRunning","type":"formula","properties":{"formulaId":"31258","args":"${steps.RunSyncParam}"}},{"id":260088,"onSuccess":["isTpIntegConfUpdated"],"onFailure":[],"name":"ChargebeePostUpdateTpIntegConf","type":"formula","properties":{"formulaId":"31258","args":"${steps.updateSyncSetup.tpConfigUpdateParams}"}},{"id":260032,"onSuccess":["SendErrorCard"],"onFailure":[],"name":"CheckError","type":"request","properties":{"method":"GET","api":"/${steps.InputParams.input.type}/mapping","headers":"${steps.CheckErrorPayload.mappingHeader}","query":"${steps.CheckErrorPayload.query}"}},{"id":260033,"onSuccess":["isListPresent"],"onFailure":[],"name":"CheckErrorCode","type":"request","properties":{"method":"GET","api":"/${steps.InputParams.input.type}/mapping","headers":"${steps.checkListParams.mappingHeader}","query":"${steps.checkListParams.query}"}},{"id":260034,"onSuccess":["CheckError"],"onFailure":[],"name":"CheckErrorPayload","type":"script","properties":{"body":"let body = {\n  mappingHeader :  {\n    \"Elements-Formula-Instance-Id\": steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.mapping.instance\n  },\n  query:JSON.stringify({\n    checkList:true\n  })\n};\n\ndone(body);"}},{"id":260035,"onSuccess":["CheckErrorCode"],"onFailure":[],"name":"checkListParams","type":"script","properties":{"body":"let body = {\n  mappingHeader :  {\n    \"Elements-Formula-Instance-Id\": steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.mapping.instance\n  },\n  query:JSON.stringify({\n    checkList:true\n  })\n};\n\ndone(body);"}},{"id":260036,"onSuccess":["HasError"],"onFailure":[],"name":"CheckStatus","type":"script","properties":{"body":"let input = {\n   error : false,\n   isStopSync: false,\n   done: false,\n   apiKey: steps.InputParams.input.apiKey,\n   siteName: steps.InputParams.input.siteName,\n   siteDomain: steps.InputParams.input.siteDomain,\n   type: steps.InputParams.input.type,\n   url : \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.ChargebeeGetLastSyncDetails.data.id,\n   headers: {\n     Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n   },\n   query: steps.ChargebeeGetLastSyncDetails.data,\n };\n \n if(steps.ExecutionStatus.response.body.status === undefined) {\n   input.error = true;\n   input.done = true;\n   input.query.status = \"failed\";\n }else if(steps.ExecutionStatus.response.body.status === \"failed\"){\n      for(var i=0;i<steps.ExecutionStatus.response.body.stepExecutions.length;i++){\n     if(steps.ExecutionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"noListFoundError\") {\n       input.result = steps.ExecutionStatus.response.body.stepExecutions[i];\n       break;\n     }}\n   input.error = true;\n   input.done = true;\n   input.query.status = \"failed\";\n }else if(steps.ExecutionStatus.response.body.status === \"success\"){\n   input.error = false;\n   input.done = true;\n    input.query.status = \"succeeded\";\n   for(var i=0;i<steps.ExecutionStatus.response.body.stepExecutions.length;i++){\n     if(steps.ExecutionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"Success\") {\n       input.result = steps.ExecutionStatus.response.body.stepExecutions[i];\n       break;\n     }\n     if(steps.ExecutionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"StopSync\") {\n         input.error = true;\n         input.isStopSync=true;\n         break;\n     }\n     if(steps.ExecutionStatus.response.body.stepExecutions[i][\"stepName\"] ===\"Error\") {\n       input.error = true;\n       input.isStopSync=true;\n       break;\n     }\n     \n   }\n   \n }else if(steps.ExecutionStatus.response.body.status === \"pending\"){\n   input.error = false;\n   input.done = false;\n   input.query.status = \"running\";\n }\n \n \n done(input);"}},{"id":260037,"onSuccess":["updateSyncSetup"],"onFailure":["SendCard"],"name":"checkSyncSetupDone","type":"filter","properties":{"body":"let action = steps.InputParams.input.action;\nlet setupStatus = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.syncSetup.syncSetupStatus;\n\nlet fromMapping = steps.InputParams.input.fromMapping;\n\n\n\nif(fromMapping === \"true\"){\n  done(false);\n}\n\nif((action === \"default\") && (setupStatus === \"NOT_CONFIGURED\")){\n  done(false);\n}\nif((action === \"default\") && (setupStatus === \"NOT_CONFIGURED\")){\n  done(false);\n}\n\nif((action === \"default\") && (setupStatus === \"CONFIGURED\")){\n  done(true);\n}\n\nif((action === \"click\") && (setupStatus === \"NOT_CONFIGURED\")){\n  done(true);\n}\n\nif((action === \"click\") && (setupStatus === \"CONFIGURED\")){\n  done(true);\n}"}},{"id":260039,"onSuccess":["ChargebeeGetLastSyncDetails"],"onFailure":[],"name":"ConfigParams","type":"script","properties":{"body":"let configJson = steps.ChargebeeGetTpIntegConf.data;\n\nconfigJson.body = configJson.config_json.cloudElements.formula.mapping.inputs;\n\nconfigJson.body.debugLoggingEnabled = true;\n\nconfigJson.body.initialSync = true;\n  configJson.body.apiKey=steps.InputParams.input.apiKey;\n  configJson.body.siteName=steps.InputParams.input.siteName;\n  configJson.body.siteDomain=steps.InputParams.input.siteDomain;\n  configJson.body.type=steps.InputParams.input.type;\nif(configJson.body!== undefined){\n  configJson.body.initialSync = true;\n  configJson.body.apiKey=steps.InputParams.input.apiKey;\n  configJson.body.siteName=steps.InputParams.input.siteName;\n  configJson.body.siteDomain=steps.InputParams.input.siteDomain;\n  configJson.body.type=steps.InputParams.input.type;\n}\n\ndone(configJson);\n\n\n "}},{"id":260040,"onSuccess":["SendLastSyncDetails"],"onFailure":[],"name":"ConstructLogRecord","type":"script","properties":{"body":"let TPErrorList = steps.ChargebeeGetTpErrorDetails.data.list;\nlet TPSuccessList = steps.ChargebeeGetTpSuccessDetails.data.list;\nlet accountName = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.thirdParty.accountName;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet activecampaign_data_url;\nlet chargebee_data_url;\nlet cb_link;\nlet ac_link;\nlet successLog = [];\nlet errorLog = [];\n\nfor ( let i = 0; i < TPSuccessList.length; ++i){\n\n activecampaign_data_url = \"https://\" + accountName + \".activehosted.com/app/contacts/\" +TPSuccessList[i].third_party_entity_mapping.third_party_entity_id;\n ac_link = \"<a href='\"+activecampaign_data_url+\"' target='blank'>\"+TPSuccessList[i].third_party_entity_mapping.third_party_entity_id+\"</a>\";\n\n chargebee_data_url = \"https://\"+siteName+\".\"+siteDomain+\"/admin-console/customers/\"+TPSuccessList[i].third_party_entity_mapping.entity_id;\n cb_link = \"<a href='\"+chargebee_data_url+\"' target='blank'>\"+TPSuccessList[i].third_party_entity_mapping.entity_id+\"</a>\"\n \n  successLog.push(\"Customer id \" + cb_link + \" is synced as \" + ac_link + \" in ActiveCampaign\\n\");\n}\n\n//To construct error log\nfor ( let i = 0; i < TPErrorList.length; ++i){\n   \n    errorLog.push(TPErrorList[i].third_party_entity_mapping.error_message );\n}\ndone({\n  successLog: successLog,\n  errorLog: errorLog\n})"}},{"id":260041,"onSuccess":["RunSyncParam"],"onFailure":["errorCard"],"name":"createSync","type":"httpRequest","properties":{"method":"POST","retryDelay":"200","retryAttempts":"5","retry":"true","retryStatusCodes":"429","url":"${steps.NewSyncDetails.url}","query":"${steps.NewSyncDetails.query}","headers":"${steps.InputParams.input.config.auth}"}},{"id":260042,"onSuccess":["sendConfigErrorMail"],"onFailure":[],"name":"EmailParams","type":"script","properties":{"body":"let payload = {\n  content : \"Integration ERROR-- Initial sync, Formula-Instance-ID : \" + trigger.args.request.headers['elements-formula-instance-id'],\n  subject : \"Fatal Error Occurred during \" + steps.InputParams.input.type + \" Integration\",\n  to_address : steps.InputParams.input.errorEmailAddress,\n  api_key : steps.InputParams.input.apiKey\n}\n\n\nlet authHeader = {\n  Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + \"\")\n};\n\ndone({\n  params: payload,\n  authHeader: authHeader\n});"}},{"id":260038,"onSuccess":[],"onFailure":[],"name":"errorCard","type":"script","properties":{"body":"let card={\n  \"cards\" : [\n    {\n      \"card\": {\n        \"type\" : \"ACTION\",\n        \"heading\" : \"Error\",\n        \"subHeading\" : \"An issue was encountered due to which the sync did not succeed. Please retry sync and if the issue still persists, contact support\",\n        \"listContent\": [],\n         \"icon\" : \"ERROR\" \n      },\n      \"id\" : \"check2\",\n      \"showRetry\":\"true\"\n    }\n  ],\n  \"proceed\":{\n    \"id\":\"proceed\",\n    \"display\" : \"Sync all records\",\n    \"icon\" : \"ARROW\",\n    \"type\" : \"POP_UP\",\n    \"popUp\":{\n      \"type\":\"SIMPLE\",\n      \"title\":\"Are you sure you want to sync all the records?\",\n      \"usecase\":\"DANGER\",\n      \"submitButton\":\"Yes, go ahead\",\n      \"cancelButton\":\"Dismiss\",\n      \"description\":\"All your customer and subscription data will be synced with Active Campaign. You can fix the errors, if any, sync the data again, later.\"\n    }\n  },\n  \"retry\":{\n    \"id\":\"retry\",\n    \"display\" : \"Retry initial sync\",\n    \"icon\" : \"ARROW\",\n    \"buttonLook\":\"FILLED\",\n    \"type\" : \"DIRECT_LINK\"\n  }\n};\n\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":260043,"onSuccess":["CheckStatus"],"onFailure":[],"name":"ExecutionStatus","type":"request","properties":{"method":"GET","api":"/formulas/instances/executions/${steps.ChargebeeGetLastSyncDetails.data.context.excecutionId}"}},{"id":260093,"onSuccess":["CheckStatus"],"onFailure":[],"name":"executionStatusParams","type":"script","properties":{"body":"let executionId = (steps.ChargebeeGetLastSyncDetails.data.third_party_sync_detail.context.excecutionId !== undefined) ? steps.ChargebeeGetLastSyncDetails.data.third_party_sync_detail.context.excecutionId : undefined;\n\nlet checkStatusParams = {\n    headers:{\n      Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n    },\n    query:{\n      execution_id: executionId\n    },\n    url : \"https://\"+steps.InputParams.input.siteName+\".integrations.\"+steps.InputParams.input.siteDomain+\"/api/pipedrive/ipaasexecution\",\n    apiKey: steps.InputParams.input.apiKey,\n    siteName: steps.InputParams.input.siteName,\n    siteDomain: steps.InputParams.input.siteDomain,\n    type: steps.InputParams.input.type,\n    initialSync: steps.InputParams.input.initialSync,\n    password: steps.InputParams.input.password\n};\n\ndone({\n  checkStatusParams: checkStatusParams\n});"}},{"id":260044,"onSuccess":["TpData"],"onFailure":[],"name":"GetResult","type":"request","properties":{"method":"GET","api":"/formulas/instances/executions/steps/${steps.CheckStatus.result.id}/values"}},{"id":260045,"onSuccess":["ChargebeeGetTpErrorDetails"],"onFailure":[],"name":"GetThirdPartyConfigParams","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.type;\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.ChargebeeGetLastSyncDetails.data;\nif (syncStaus.status === \"succeeded\") {\n    startTime = syncStaus.context.syncData.syncStart;\n} else {\n    startTime = syncStaus.context.syncData.previousSyncStart;\n    endTime = syncStaus.context.syncData.previousSyncEnd;\n}\n\nlet params = {\n    input: {\n      apiKey: apiKey,\n      siteName: siteName,\n      siteDomain: siteDomain,\n      type: type,\n      url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n      headers: {\n          Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query: {\n          integration_name: type,\n          \"status[is]\": \"update_failed\",\n          \"modified_at[after]\": startTime,\n          \"modified_at[before]\": syncStaus.status === \"failed\" ? endTime : undefined\n      }\n    }\n};\n\ndone({ params: params });"}},{"id":260046,"onSuccess":["TPSuccessDetailsParam"],"onFailure":[],"name":"GetThirdPartyErrorDetails","type":"httpRequest","properties":{"method":"GET","url":"${steps.GetThirdPartyConfigParams.params.input.config.url}","headers":"${steps.GetThirdPartyConfigParams.params.input.config.auth}","query":"${steps.GetThirdPartyConfigParams.params.input.config.query}"}},{"id":260047,"onSuccess":["TpData"],"onFailure":[],"name":"GetTPMapping1","type":"httpRequest","properties":{"method":"GET","url":"${steps.TPMappingParam.params.config.url}","headers":"${steps.TPMappingParam.params.config.auth}","query":"${steps.TPMappingParam.params.config.query}"}},{"id":260048,"onSuccess":["ConstructLogRecord"],"onFailure":[],"name":"GetTPSuccessDetails","type":"httpRequest","properties":{"method":"GET","url":"${steps.TPSuccessDetailsParam.params.config.url}","headers":"${steps.TPSuccessDetailsParam.params.config.auth}","query":"${steps.TPSuccessDetailsParam.params.config.query}"}},{"id":260049,"onSuccess":["TPMappingParam"],"onFailure":["processcardForRetry"],"name":"HasDone","type":"filter","properties":{"body":"done(steps.CheckStatus.done);"}},{"id":260050,"onSuccess":["ChargebeePostUpdateSyncFailed"],"onFailure":["HasDone"],"name":"HasError","type":"filter","properties":{"body":"done(steps.CheckStatus.error);"}},{"id":260051,"onSuccess":["SyncAgain"],"onFailure":["ExecutionStatus"],"name":"HasNoExcecution","type":"filter","properties":{"body":"let flag = false;\nlet syncStatus = steps.ChargebeeGetLastSyncDetails.data.status;\nif(syncStatus===\"succeeded\" || syncStatus===\"failed\") {\n  flag = true;\n}\ndone(flag);"}},{"id":260052,"onSuccess":["ChargebeeGetTpIntegConf"],"onFailure":[],"name":"InputParams","type":"script","properties":{"body":"let password = \"\";\nlet apiKey = trigger.args.request.query['cb-api-key'];\nlet siteName = trigger.args.request.query['cb-site-name'];\nlet type = trigger.args.request.query['type'];\nlet siteDomain = trigger.args.request.query['cb-domain'];\nlet fromMapping = trigger.args.request.query['fromMapping'];//request from mappping edit from manage sync preference\n\nlet retry = '';\nlet initialSync = '';\nlet action = trigger.args.request.query['action'];\n\nif((trigger.args.request.query['retry'] === undefined)){\n    retry = \"false\";\n}else{\n  if(trigger.args.request.query['retry'] === false){\n    retry = \"false\";\n  }else{\n    retry = \"true\";\n  }\n}\n\nif((trigger.args.request.query['initialSync'] === undefined)){\n    initialSync = \"false\";\n}else{\n  if(trigger.args.request.query['initialSync'] === false){\n    initialSync = \"false\";\n  }else{\n    initialSync = \"true\";\n  }\n}\n\nlet getTpConfigParams = {\n    // url: \"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_configurations\",\n    url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/third_party_configurations/tpmeta\",\n    headers:{\n      Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password),\n      api_key: apiKey\n    },\n    query:{\n      integration_name: type\n    },\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    initialSync: initialSync,\n    password: password\n};\n\nlet updateTpConfigParams = {\n    url: \"https://\"+siteName+\".integrations.\"+siteDomain+\"/integrations/update_tp_integ_conf\",\n    headers: {\n     \"Content-Type\": \"application/json\",\n     \"cache-control\": \"no-cache\"\n    },\n    body:{\n      integration_name: type,\n      site_name: siteName,\n      api_key: apiKey\n    },\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain: siteDomain,\n    type: type,\n    initialSync: initialSync,\n    password: password\n};\n\nlet retrieveLatestSyncConfig = {\n  // url:\"https://\"+siteName+\".\"+siteDomain+\"/api/v2/third_party_sync_details/retrieve_latest_sync\",\n  url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/third_party_sync_details/tpmeta?integration_name=activecampaign\",\n  headers:{\n    Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password),\n    api_key: apiKey\n  },\n  query:{\n    'third_party_configuration[integration_name]': type\n  },\n  apiKey: apiKey,\n  siteName: siteName,\n  siteDomain:siteDomain,\n  type: type,\n  initialSync:initialSync,\n  password: password\n};\n\nlet params = {\n  getTpConfigParams: getTpConfigParams,\n  updateTpConfigParams: updateTpConfigParams,\n  retrieveLatestSyncConfig: retrieveLatestSyncConfig,\n  input: {\n    apiKey: apiKey,\n    siteName: siteName,\n    siteDomain:siteDomain,\n    type: type,\n    retry:retry,\n    initialSync:initialSync,\n    action:action,\n    fromMapping:fromMapping\n  }\n};\n\ndone(params);"}},{"id":260103,"onSuccess":["RunSyncParam"],"onFailure":["sendErrorCard_2"],"name":"isCreateNewSyncDetailsSuccess","type":"filter","properties":{"body":"if(steps.ChargebeePostCreateNewSyncDetails.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260095,"onSuccess":["CheckStatus"],"onFailure":["errorCard"],"name":"isGetIpaasExecutionApiSuccess","type":"filter","properties":{"body":"if(steps.ChargebeeGetIpaasExecutionStatus.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260053,"onSuccess":["lastSyncIsInitialSync"],"onFailure":["LastSyncDetailsKeyExpired"],"name":"isKeyExpired","type":"filter","properties":{"body":"let statusCode = steps.CheckErrorCode.response.body.code;\n\nif(statusCode === 403){\n  done(false)\n}\ndone(true);"}},{"id":268521,"onSuccess":["checkListParams"],"onFailure":["sendErrorCard_2"],"name":"isLastSyncAttemptFailed","type":"filter","properties":{"body":"if(steps.ChargebeeGetLastSyncDetails.data.status === \"failed\"){\n  done(false); \n}\nelse{\n  done(true);\n}"}},{"id":260092,"onSuccess":["HasNoExcecution"],"onFailure":["StartExcecution"],"name":"isLastSyncDetailsApiSuccess","type":"filter","properties":{"body":"if(steps.ChargebeeGetLastSyncDetails.cb_status == \"success\"){\n  done(true); \n}\nelse{\n  done(false);\n}"}},{"id":260054,"onSuccess":["isKeyExpired"],"onFailure":["LastSyncDetailsListNotPresent"],"name":"isListPresent","type":"filter","properties":{"body":"let statusCode = steps.CheckErrorCode.response.body.code;\nlet lists = steps.CheckErrorCode.response.body.lists;\nlet selectedListId = steps.ConfigParams.config_json.cloudElements.formula.mapping.inputs.list;\nlet flag = false;\n\nif(lists !== undefined && lists[selectedListId] === undefined){\n  flag = true;\n}\n\nif(statusCode === 404 || flag === true){\n  done(false)\n}\ndone(true);"}},{"id":260055,"onSuccess":[],"onFailure":["processcardForRetry"],"name":"isRetry","type":"filter","properties":{"body":"done(false);\n\nif(steps.ChargebeeConfigParams.response.body.third_party_configuration.config_json.cloudElements.logs === undefined){\n  done(true);\n}\nif(steps.InputParams.input.action ===\"default\"){\n  done(false);\n}\ndone(true);\n\n  \n"}},{"id":260056,"onSuccess":[],"onFailure":["processcardForRetry"],"name":"is-Retry","type":"filter","properties":{"body":"// done(steps.InputParams.input.retry !== \"true\");\n  \n// if(steps.InputParams.input.action===\"run_initialsync_click\"){\n//   done(true);\n// }\n done(false);\n\n\nif(steps.ChargebeeConfigParams.response.body.third_party_configuration.config_json.cloudElements.logs !== undefined){\n  done(false);\n}\ndone(true);"}},{"id":260100,"onSuccess":["TpData"],"onFailure":["sendErrorCard_2"],"name":"isTpEntityMappingApiSuccess","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpEntityMapping.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260116,"onSuccess":["TPSuccessDetailsParam"],"onFailure":["sendErrorCard_2"],"name":"isTpErrorDetailsFetched","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpErrorDetails.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260087,"onSuccess":["checkSyncSetupDone"],"onFailure":["errorCard"],"name":"IsTpIntegConfFetched","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpIntegConf.cb_status == \"success\"){\n  if(steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula.mapping.inputs=== undefined){\n    done(false);\n  }\n  done(true);\n}\nelse\n  done(false);"}},{"id":260089,"onSuccess":["ConfigParams"],"onFailure":["errorCard"],"name":"isTpIntegConfUpdated","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateTpIntegConf.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260118,"onSuccess":["ConstructLogRecord"],"onFailure":["sendErrorCard_2"],"name":"isTpSuccessDetailsFetched","type":"filter","properties":{"body":"if(steps.ChargebeeGetTpSuccessDetails.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260105,"onSuccess":["processcardForRetry"],"onFailure":["sendErrorCard_2"],"name":"isUpdateRunSyncSuccess","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateSyncRunning.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260098,"onSuccess":["CheckErrorPayload"],"onFailure":["sendErrorCard_2"],"name":"isUpdateSuccess_2","type":"filter","properties":{"body":"if(steps.ChargebeePostUpdateSyncFailed.cb_status == \"success\")\n  done(true);\nelse\n  done(false);"}},{"id":260057,"onSuccess":["HasNoExcecution"],"onFailure":["StartExcecution"],"name":"LastSyncDetails","type":"httpRequest","properties":{"method":"GET","retryDelay":"200","retryAttempts":"5","retryStatusCodes":"429","url":"${steps.InputParams.input.config.syncUrl}","retry":"true","headers":"${steps.InputParams.input.config.auth}","query":"${steps.InputParams.input.config.syncQuery}"}},{"id":260058,"onSuccess":[],"onFailure":[],"name":"LastSyncDetailsKeyExpired","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nlet card = {\n    \"cards\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"ActiveCampaign key has been expired\",\n            \"subHeading\": \"Looks like ActiveCampaign key has been expired. Please resolve this for the sync to resume.\",\n            \"icon\": \"ERROR\",\n            \"buttons\": [{\n                \"display\": \"Resolve\",\n                \"icon\": \"ARROW\",\n                \"id\": \"errors\",\n                \"type\": \"POP_UP\",\n                \"requestType\": \"authexpiry\",\n                \"popUp\": {\n                    \"inputFields\": [\n                        {\n                            \"dispName\": \"Base Url\",\n                            \"req\": \"true\",\n                            \"type\": \"TEXT\",\n                            \"id\": \"text\",\n                            \"placeholder\": \"EG: ABC.ACTIVEHOSTED.COM \"\n                        },\n                        {\n                            \"dispName\": \"API Secret\",\n                            \"req\": \"true\",\n                            \"type\": \"PASSWORD\",\n                            \"id\": \"password\",\n                            \"placeholder\": \"eg: 1233asfsdf23434343434\"\n                        },\n                        {\n                            \"req\": \"true\",\n                            \"type\": \"CHECKBOX\",\n                            \"id\": \"checkbox1\",\n                            \"desc\": \"I understand that, ActiveCampaign may store my customer and subscription data. (Please refer to ActiveCampaign's <a href='https://www.activecampaign.com/terms-of-service'>Terms of Service</a>, <a href='https://www.activecampaign.com/consent-policy'>Consent policy</a> and <a href='https://www.activecampaign.com/privacy-policy'>Privacy policy</a>).\"\n                        }\n                    ],\n                    \"message\": {\n                        \"message\": \"You can get your Base URL and API secret from ActiveCampaign by navigating to Settings > Developer\"\n                    },\n                    \"title\": \"Connect to ActiveCampaign\",\n                    \"submitButton\": \"Connect\",\n                    \"cancelButton\": \"Dismiss\",\n                    \"description\": \"Specify your ActiveCampaign Base URL and API secret\",\n                    \"advance\": \"true\",\n                    \"type\": \"INPUT\",\n                    \"apiEndPoint\": {\n                        \"apiUrl\": url + \"/create\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": formula.activeCampaignCreateSetup.instance\n                        },\n                        \"input\": {\n                            \"type\": steps.InputParams.input.type,\n                            \"siteDomain\": steps.InputParams.input.siteDomain,\n                            \"formulaCreate\": formula.create.instance,\n                            \"isReauthenticate\": true\n\n                        }\n                    }\n                }\n            }]\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"false\"\n    }],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\": \"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"Your customer and their subscriptions will be synced to ActiveCampaign. Any data sync errors that arise during the sync, will be logged separately. Once you fix them, they shall be synced again.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"apiKey\": steps.InputParams.input.apiKey,\n                    \"siteName\": steps.InputParams.input.siteName,\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"syncNow\": \"syncNow\"\n\n                }\n            }\n        }\n    },\n    \"retry\": {\n        \"buttonLook\": \"FILLED\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"id\": \"retry\",\n\n        \"request\": {\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/initialsync/run\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"action\": \"click\",\n                    \"retry\": \"true\",\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"type\": steps.InputParams.input.type,\n                    \"initialSync\": \"true\"\n                },\n                \"type\": \"GET\"\n            },\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n        },\n        \"type\": \"DIRECT_LINK\"\n    }\n};\n\n\ndone({\n    statusCode: 200,\n    result: card\n})"}},{"id":260059,"onSuccess":[],"onFailure":[],"name":"LastSyncDetailsListNotPresent","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nlet card = {\n    \"cards\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"List Unavailable in ActiveCampaign\",\n            \"subHeading\": \"Looks like ActiveCampaign list has been deleted. Please resolve this for the sync to resume.\",\n            \"icon\": \"ERROR\",\n            \"buttons\": [{\n                \"id\": \"direct\",\n                \"display\": \"Resolve\",\n                \"icon\": \"ARROW\",\n                \"type\": \"EDIT_STEP\",\n                \"editConfig\": {\n                    \"integration\": \"activecampaign\",\n                    \"stepId\": \"step_2\",\n                    \"apiEndPoint\": {\n                        \"type\": \"GET\",\n                        \"apiUrl\": url + \"/mapping\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": formula.activeCampaignMappingSetup.instance\n                        },\n                        \"input\": {\n                            \"type\": steps.InputParams.input.type,\n                            \"siteDomain\": steps.InputParams.input.siteDomain,\n                            \"api-key\": steps.InputParams.input.apiKey,\n                            \"site-name\": steps.InputParams.input.siteName,\n                            \"resolveButtonAction\": true,\n                            \"op\": \"edit\"\n\n\n                        }\n                    }\n                }\n            }]\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"true\"\n    }],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\": \"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"Your customer and their subscriptions will be synced to ActiveCampaign. Any data sync errors that arise during the sync, will be logged separately. Once you fix them, they shall be synced again.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"apiKey\": steps.InputParams.input.apiKey,\n                    \"siteName\": steps.InputParams.input.siteName,\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"syncNow\": \"syncNow\"\n\n                }\n            }\n        }\n    },\n    \"retry\": {\n        \"buttonLook\": \"FILLED\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"id\": \"retry\",\n\n        \"request\": {\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/initialsync/run\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"action\": \"click\",\n                    \"retry\": \"true\",\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"type\": steps.InputParams.input.type,\n                    \"initialSync\": \"true\"\n                },\n                \"type\": \"GET\"\n            },\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n        },\n        \"type\": \"DIRECT_LINK\"\n    }\n};\n\n\ndone({\n    statusCode: 200,\n    result: card\n})"}},{"id":269030,"onSuccess":["GetThirdPartyConfigParams"],"onFailure":["noSyncDataAvailable"],"name":"lastSyncIsInitialSync","type":"filter","properties":{"body":"if(steps.ChargebeeGetLastSyncDetails.data.context.initialSync === true){\n  done(true); \n}\n\ndone(false);"}},{"id":260060,"onSuccess":[],"onFailure":[],"name":"MakeCard","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\nlet total = steps.TpData.successLog.length + steps.TpData.errorLog.length;\n\n\nlet card = {\n    \"cards\":[\n      {\n        \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \" \" + steps.TpData.successLog.length + \" out of \" + total + \" records synced successfully\",\n            \"listContent\": steps.TpData.successLog,\n            \"icon\" : \"SUCCESS\"         \n        },\n        \"id\" : \"check2\",\n        \"isCardDone\":\"true\"\n      },\n      {\n         \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : \" \" + steps.TpData.errorLog.length + \" out of \" + total + \" records could not be synced\",\n            \"subHeading\" : \"You could fix these errors and retry sync. Or you could go ahead and sync all records. We recommend that you fix these errors and retry sync.\",\n            \"listContent\": steps.TpData.errorLog,\n            \"icon\" : \"ERROR\"         \n         },\n         \"id\" : \"check3\",\n         \"isCardDone\":\"true\"\n      }\n      ] \n  };\nif(card.cards[0] !== undefined){\n  card.cards[0].showRetry=\"true\";\n  if(card.cards[0].card.listContent.length === 0){\n    card.cards.splice(0,1);\n  }\n}\n\nif(card.cards[1] !== undefined){\n  card.cards[1].showRetry=\"true\";\n  if(card.cards[1].card.listContent.length === 0){\n    card.cards.splice(1,1);\n  }\n}\n\ncard.proceed = {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"Your customer and their subscriptions will be synced to ActiveCampaign. Any data sync errors that arise during the sync, will be logged separately. Once you fix them, they shall be synced again.\",\n        \"apiEndPoint\": {\n                \"type\": \"GET\",\n                \"apiUrl\": url+\"/sync/run\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":  formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n                }\n        }\n        }\n    };\n    \ncard.retry = {\n        \"id\": \"retry\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"buttonLook\":\"FILLED\",\n        \"type\": \"DIRECT_LINK\",\n        \"request\": {\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url+\"/initialsync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"retry\": \"true\",\n                    \"initialSync\": \"false\",\n                    \"action\": \"click\"\n                }\n            }\n        }\n    };\n\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":260061,"onSuccess":["ChargebeePostCreateNewSyncDetails"],"onFailure":[],"name":"NewSyncDetails","type":"script","properties":{"body":"let configJson = steps.ConfigParams.config_json;\n\nlet payload = {\n  apiKey: steps.InputParams.input.apiKey,\n  siteName: steps.InputParams.input.siteName,\n  siteDomain: steps.InputParams.input.siteDomain,\n  type: steps.InputParams.input.type,\n  url : \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/api/v2/third_party_sync_details\",\n  headers: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n  },\n  query: {\n    'third_party_configuration[integration_name]': steps.InputParams.input.type,\n    \"context\": {\n        \"excecutionId\":steps.StartExcecution.response.body[0].id,\n        \"instance\":configJson.cloudElements.formula.sync.instance,\n        \"formula\":configJson.cloudElements.formula.sync.id,\n        \"initialSync\":true,\n           \"syncData\" :{ \n           \"syncStart\" : Math.round((new Date().getTime())/1000)\n         }\n      }\n  }\n};\n\n\ndone({\n  payload: payload\n});"}},{"id":269031,"onSuccess":[],"onFailure":[],"name":"noSyncDataAvailable","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nlet card = {\n    \"cards\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error\",\n            \"subHeading\": \"No initial sync information available. Please retry sync and if the issue still persists, contact support\",\n            \"icon\": \"WARNING\"\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"true\"\n    }],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\": \"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"apiKey\": steps.InputParams.input.apiKey,\n                    \"siteName\": steps.InputParams.input.siteName,\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"syncNow\": \"syncNow\"\n\n                }\n            }\n        }\n    },\n    \"retry\": {\n        \"buttonLook\": \"FILLED\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"id\": \"retry\",\n\n        \"request\": {\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/initialsync/run\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"action\": \"click\",\n                    \"retry\": \"true\",\n                    \"type\": \"activecampaign\",\n                    \"initialSync\": \"true\"\n                },\n                \"type\": \"GET\"\n            },\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n        },\n        \"type\": \"DIRECT_LINK\"\n    }\n};\n\ndone({\n    statusCode: 200,\n    result: card\n});"}},{"id":260062,"onSuccess":[],"onFailure":[],"name":"processcardForRetry","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nlet card = {\n    \"cards\": [\n      {\n         \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Syncing first 10 customers and their subscriptions\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": url+\"/initialsync/run\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                        },\n                        \"input\":{\n                            \"type\": steps.InputParams.input.type,\n                            \"siteDomain\": steps.InputParams.input.siteDomain,\n                            \"action\": \"default\"\n                        }\n               }\n            }\n         },\n         \"id\" : \"check2\",\n          \"showRetry\":\"false\"\n      } \n   ],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n               \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n                      \n                }\n            }\n        }\n    },\n    \"retry\": {\n      \"buttonLook\": \"FILLED\",\n      \"display\": \"Retry Initial Sync\",\n      \"icon\": \"ARROW\",\n      \"id\": \"retry\",\n     \n      \"request\": {\n        \"apiEndPoint\": {\n          \"apiUrl\": url+\"/initialsync/run\",\n          \"headers\": {\n            \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n          },\n          \"input\": {\n            \"action\": \"click\",\n            \"retry\": \"true\",\n            \"siteDomain\": steps.InputParams.input.siteDomain,\n            \"type\": steps.InputParams.input.type,\n             \"initialSync\": \"true\"\n          },\n          \"type\": \"GET\"\n        },\n        \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n      },\n      \"type\": \"DIRECT_LINK\"\n    }\n};\n\n\ndone({\n    statusCode: 200,\n    result: card\n})"}},{"id":260063,"onSuccess":["ChargebeePostUpdateSyncRunning"],"onFailure":[],"name":"RunSyncParam","type":"script","properties":{"body":"let body = steps.ChargebeePostCreateNewSyncDetails.data.third_party_sync_detail;\nlet syncStatus = steps.ChargebeeGetLastSyncDetails.data;\n\nif(syncStatus !== undefined && syncStatus.context.syncData !== undefined){\nif(syncStatus.status === \"failed\"){\n  body.context.syncData.previousSyncStart = syncStatus.context.syncData.previousSyncStart;\n  body.context.syncData.previousSyncEnd = syncStatus.context.syncData.previousSyncEnd;\n}\nelse{\n  body.context.syncData.previousSyncEnd = syncStatus.context.syncData.syncEnd || undefined;\n  body.context.syncData.previousSyncStart = syncStatus.context.syncData.syncStart || undefined;\n}\n}\n\nlet input = {\n  apiKey: steps.InputParams.input.apiKey,\n  siteName: steps.InputParams.input.siteName,\n  siteDomain: steps.InputParams.input.siteDomain,\n  type: steps.InputParams.input.type,\n  error : false,\n  done: false,\n  url : \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/api/v2/third_party_sync_details/\" +steps.ChargebeePostCreateNewSyncDetails.data.third_party_sync_detail.id,\n  headers: {\n    Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + steps.InputParams.input.password)\n  },\n  query: body,\n};\n\ninput.query.status = \"running\";\ndone(input);"}},{"id":260064,"onSuccess":[],"onFailure":[],"name":"SendCard","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\n\nlet card = {\n    \"cards\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"We'll run an Initial sync\",\n            \"subHeading\":\"We'll sync your first 10 customers and their subscriptions to ActiveCampaign. After initial sync, we recommend that you verify the data synced to Active Campaign.\",\n            \"buttons\": [{\n                \"id\": \"direct\",\n                \"display\": \"Run Initial Sync\",\n                \"icon\": \"ARROW\",\n                \"type\": \"DIRECT_LINK\",\n                \"buttonLook\":\"FILLED\",\n                \"request\": {\n                    \"type\": \"ON_CLICK_GET_CARD\",\n                    \"apiEndPoint\": {\n                        \"apiUrl\": url+\"/initialsync/run\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                        },\n                        \"input\":{\n                            \"type\": steps.InputParams.input.type,\n                            \"siteDomain\": steps.InputParams.input.siteDomain,\n                            \"initialSync\": \"true\",\n                            \"action\": \"click\"\n                        }\n                    }\n                }\n            }]\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"false\"\n    }],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\":  \"Are you sure you want to sync all the records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced with ActiveCampaign. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url+\"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\":  formula.ActiveCampaignSyncRunSetup.instance\n                },\n               \"input\": {\n                      \"apiKey\": steps.InputParams.input.apiKey,\n                      \"siteName\": steps.InputParams.input.siteName,\n                      \"type\": steps.InputParams.input.type,\n                      \"siteDomain\": steps.InputParams.input.siteDomain,\n                      \"syncNow\": \"syncNow\"\n                      \n                }\n            }\n        }\n    },\n    \"retry\": {\n      \"buttonLook\": \"FILLED\",\n      \"display\": \"Retry Initial Sync\",\n      \"icon\": \"ARROW\",\n      \"id\": \"retry\",\n     \n      \"request\": {\n        \"apiEndPoint\": {\n          \"apiUrl\": url+\"/initialsync/run\",\n          \"headers\": {\n            \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n          },\n          \"input\": {\n            \"action\": \"click\",\n            \"retry\": \"true\",\n            \"siteDomain\": steps.InputParams.input.siteDomain,\n            \"type\": steps.InputParams.input.type,\n             \"initialSync\": \"true\"\n          },\n          \"type\": \"GET\"\n        },\n        \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n      },\n      \"type\": \"DIRECT_LINK\"\n    }\n};\n\n\ndone({\n    statusCode: 200,\n    result: card\n})"}},{"id":260065,"onSuccess":["errorCard"],"onFailure":[],"name":"sendConfigErrorMail","type":"httpRequest","properties":{"method":"POST","url":"${steps.InputParams.input.errorEmailEndpoint}","headers":"${steps.InputParams.input.authHeader}","query":"${steps.EmailParams.params}"}},{"id":260066,"onSuccess":[],"onFailure":[],"name":"SendErrorCard","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nlet flag = false;\nlet selectedListId = formula.mapping.inputs.list;\nlet lists = steps.CheckError.response.body.lists;\nlet statusCode = steps.CheckError.response.body.code;\n\nif (lists !== undefined && lists[selectedListId] === undefined) {\n    flag = true;\n}\n\nlet card = {\n    \"cards\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error\",\n            \"subHeading\": \"An issue was encountered due to which the sync did not succeed. Please retry sync and if the issue still persists, contact support\",\n            \"icon\": \"ERROR\"\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"true\"\n    }],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\": \"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"apiKey\": steps.InputParams.input.apiKey,\n                    \"siteName\": steps.InputParams.input.siteName,\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"syncNow\": \"syncNow\"\n\n                }\n            }\n        }\n    },\n    \"retry\": {\n        \"buttonLook\": \"FILLED\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"id\": \"retry\",\n\n        \"request\": {\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/initialsync/run\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"action\": \"click\",\n                    \"retry\": \"true\",\n                    \"siteDomain\": \"chargebee-labs.com\",\n                    \"type\": \"activecampaign\",\n                    \"initialSync\": \"true\"\n                },\n                \"type\": \"GET\"\n            },\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n        },\n        \"type\": \"DIRECT_LINK\"\n    }\n};\n\nif (statusCode === 404 || flag === true) {\n    card.cards[0].card.heading = \"List Unavailable in ActiveCampaign\";\n    card.cards[0].card.subHeading = \" Looks like ActiveCampaign list has been deleted. Please resolve this for the sync to resume.\";\n    card.cards[0].card.buttons = [{\n        \"display\": \"Resolve\",\n        \"icon\": \"ARROW\",\n        \"id\": \"resolve\",\n        \"type\": \"EDIT_STEP\",\n        \"editConfig\": {\n            \"integration\": \"activecampaign\",\n            \"stepId\": \"step_2\",\n            \"apiEndPoint\": {\n                \"type\": \"GET\",\n                \"apiUrl\": url + \"/mapping\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignMappingSetup.instance\n                },\n                \"input\": {\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"api-key\": steps.InputParams.input.apiKey,\n                    \"site-name\": steps.InputParams.input.siteName,\n                    \"resolveButtonAction\": true,\n                    \"op\": \"edit\"\n\n\n                }\n            }\n        }\n    }];\n}\n\nif (statusCode === 403) {\n    card.cards[0].card.heading = \"ActiveCampaign key has been expired\";\n    card.cards[0].card.subHeading = \" Looks like ActiveCampaign key has been expired. Please resolve this for the sync to resume.\";\n    card.cards[0].card.buttons = [{\n        \"display\": \"Resolve\",\n        \"icon\": \"ARROW\",\n        \"id\": \"errors\",\n        \"type\": \"POP_UP\",\n        \"requestType\": \"authexpiry\",\n        \"popUp\": {\n            \"inputFields\": [\n                {\n                    \"dispName\": \"Base Url\",\n                    \"req\": \"true\",\n                    \"type\": \"TEXT\",\n                    \"id\": \"text\",\n                    \"placeholder\": \"EG: ABC.ACTIVEHOSTED.COM \"\n                },\n                {\n                    \"dispName\": \"API Secret\",\n                    \"req\": \"true\",\n                    \"type\": \"PASSWORD\",\n                    \"id\": \"password\",\n                    \"placeholder\": \"eg: 1233asfsdf23434343434\"\n                },\n                {\n                    \"req\": \"true\",\n                    \"type\": \"CHECKBOX\",\n                    \"id\": \"checkbox1\",\n                    \"desc\": \"I understand that, ActiveCampaign may store my customer and subscription data. (Please refer to ActiveCampaign's <a href='https://www.activecampaign.com/terms-of-service'>Terms of Service</a>, <a href='https://www.activecampaign.com/consent-policy'>Consent policy</a> and <a href='https://www.activecampaign.com/privacy-policy'>Privacy policy</a>).\"\n                }\n            ],\n            \"message\": {\n                \"message\": \"You can get your Base URL and API secret from ActiveCampaign by navigating to Settings > Developer\"\n            },\n            \"title\": \"Connect to ActiveCampaign\",\n            \"submitButton\": \"Connect\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"Specify your ActiveCampaign Base URL and API secret\",\n            \"advance\": \"true\",\n            \"type\": \"INPUT\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/create\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignCreateSetup.instance\n                },\n                \"input\": {\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"formulaCreate\": formula.create.instance,\n                    \"isReauthenticate\": true\n\n                }\n            }\n        }\n    }];\n}\n\n\ndone({\n    statusCode: 200,\n    result: card\n})"}},{"id":269029,"onSuccess":[],"onFailure":[],"name":"sendErrorCard_2","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nlet card = {\n    \"cards\": [{\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"Error\",\n            \"subHeading\": \"An issue was encountered due to which the sync did not succeed. Please retry sync and if the issue still persists, contact support\",\n            \"icon\": \"ERROR\"\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"true\"\n    }],\n    \"proceed\": {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\": \"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"All your customer and subscription data will be synced. You can fix the errors, if any, sync the data again, later.\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/sync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.ActiveCampaignSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"apiKey\": steps.InputParams.input.apiKey,\n                    \"siteName\": steps.InputParams.input.siteName,\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"syncNow\": \"syncNow\"\n\n                }\n            }\n        }\n    },\n    \"retry\": {\n        \"buttonLook\": \"FILLED\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"id\": \"retry\",\n\n        \"request\": {\n            \"apiEndPoint\": {\n                \"apiUrl\": url + \"/initialsync/run\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                },\n                \"input\": {\n                    \"action\": \"click\",\n                    \"retry\": \"true\",\n                    \"type\": \"activecampaign\",\n                    \"initialSync\": \"true\"\n                },\n                \"type\": \"GET\"\n            },\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\"\n        },\n        \"type\": \"DIRECT_LINK\"\n    }\n};\n\ndone({\n    statusCode: 200,\n    result: card\n});"}},{"id":260067,"onSuccess":[],"onFailure":[],"name":"SendErrorCard-IntegrationError","type":"script","properties":{"body":"let card={\n  \"cards\" : [\n    {\n      \"card\": {\n        \"type\" : \"ACTION\",\n        \"heading\" : \"Integration Error\",\n        \"subHeading\" : \"ActiveCampaign Integration Error\",\n         \"icon\" : \"ERROR\" \n      },\n      \"id\" : \"check2\",\n      \"showRetry\":\"true\"\n    }\n  ],\n  \"proceed\":{\n    \"id\":\"proceed\",\n    \"display\" : \"Sync all records\",\n    \"icon\" : \"ARROW\",\n    \"type\" : \"POP_UP\",\n    \"popUp\":{\n      \"type\":\"SIMPLE\",\n      \"title\":\"Are you sure you want to ignore the errors and sync all records?\",\n      \"usecase\":\"DANGER\",\n      \"submitButton\":\"Yes, go ahead\",\n      \"cancelButton\":\"Dismiss\",\n      \"description\":\"All your customer and subscription data will be synced with Active Campaign. You can fix the errors, if any, sync the data again, later.\"\n    }\n  },\n  \"retry\":{\n    \"id\":\"retry\",\n    \"display\" : \"Retry initial sync\",\n    \"icon\" : \"ARROW\",\n    \"buttonLook\":\"FILLED\",\n    \"type\" : \"DIRECT_LINK\"\n \n  }\n};\n\n\ndone({\n  statusCode: 200,\n  result: card\n});"}},{"id":260068,"onSuccess":["CheckErrorPayload"],"onFailure":["SendErrorCard-IntegrationError"],"name":"sendErrorMail","type":"httpRequest","properties":{"method":"POST","url":"${steps.InputParams.input.errorEmailEndpoint}","headers":"${steps.InputParams.input.authHeader}","query":"${steps.sendErrorMailParams.params}"}},{"id":260069,"onSuccess":["sendErrorMail"],"onFailure":[],"name":"sendErrorMailParams","type":"script","properties":{"body":"let payload = {\n  content : \"Integration Error, Formula-Name: ActiveCampaignSync, Formula-Instance-ID : \" + steps.ConfigParams.config_json.cloudElements.formula.sync.instance,\n  subject : \"Fatal Error Occurred during \" + steps.InputParams.input.type + \" Initial Sync\",\n  to_address : steps.InputParams.input.errorEmailAddress,\n  api_key : steps.InputParams.input.apiKey\n};\n\n\nlet authHeader = {\n  Authorization: \"Basic \" + CE.b64(steps.InputParams.input.apiKey + \":\" + \"\")\n};\n\ndone({\n  params: payload,\n  authHeader: authHeader\n});"}},{"id":260070,"onSuccess":[],"onFailure":[],"name":"SendLastSyncDetails","type":"script","properties":{"body":"let url = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.url;\nlet formula = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.formula;\n\nlet error = steps.ConstructLogRecord.errorLog;\nlet success = steps.ConstructLogRecord.successLog;\n\nlet card = {\n   \"cards\":[]\n};\n\nif(success.length > 0){\n  let successCard = {\n         \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" :success.length+\" out of \"+(error.length+success.length)+\" records synced successfully\",\n            \"listContent\":success,\n            \"icon\" : \"SUCCESS\"         \n         },\n         \"id\" : \"check2\",\n         \"isCardDone\":\"true\"\n      };\n  card.cards.push(successCard);\n}\n\nif(error.length > 0){\n  let errorCard = {\n         \"card\": {\n            \"type\" : \"ACTION\",\n            \"heading\" : error.length+\" out of \"+(error.length+success.length)+\" records could not be synced\",\n            \"subHeading\" : \"You could fix these errors and retry sync. Or you could go ahead and sync all records. We recommend that you fix these errors and retry sync.\",\n            \"listContent\":error,\n            \"icon\" : \"ERROR\"         \n         },\n         \"id\" : \"check3\",\n         \"isCardDone\":\"true\"\n      };\n  card.cards.push(errorCard);\n}\nif(card.cards.length === 0){\n  card.cards.push({\n        \"card\": {\n            \"type\": \"ACTION\",\n            \"heading\": \"We'll run an Initial sync\",\n            \"subHeading\":\"We'll sync your first 10 customers and their subscriptions to ActiveCampaign. After initial sync, we recommend that you verify the data synced to Active Campaign.\",\n            \"buttons\": [{\n                \"id\": \"direct\",\n                \"display\": \"Run Initial Sync\",\n                \"icon\": \"ARROW\",\n                \"type\": \"DIRECT_LINK\",\n                \"buttonLook\":\"FILLED\",\n                \"request\": {\n                    \"type\": \"ON_CLICK_GET_CARD\",\n                    \"apiEndPoint\": {\n                        \"apiUrl\": url+\"/initialsync/run\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                        },\n                        \"input\":{\n                            \"type\": steps.InputParams.input.type,\n                            \"siteDomain\": steps.InputParams.input.siteDomain,\n                            \"initialSync\": \"true\",\n                            \"action\": \"click\"\n                        }\n                    }\n                }\n            }]\n        },\n        \"id\": \"check2\",\n        \"showRetry\": \"false\"\n    });\n}\n\ncard.proceed = {\n        \"id\": \"proceed\",\n        \"display\": \"Sync All Records\",\n        \"icon\": \"ARROW\",\n        \"type\": \"POP_UP\",\n        \"popUp\": {\n            \"type\": \"SIMPLE\",\n            \"title\": \"Are you sure you want to sync all the records?\",\n            \"usecase\":\"DANGER\",\n            \"submitButton\": \"Yes, go ahead\",\n            \"cancelButton\": \"Dismiss\",\n            \"description\": \"Your customer and their subscriptions will be synced to ActiveCampaign. Any data sync errors that arise during the sync, will be logged separately. Once you fix them, they shall be synced again.\",\n              \"apiEndPoint\": {\n            \"apiUrl\": url+\"/sync/run\",\n        \"headers\": {\n          \"Elements-Formula-Instance-Id\":  formula.ActiveCampaignSyncRunSetup.instance\n        },\n        \"input\": {\n          \"apiKey\": \"test_FdeKa4XuFlZ6ZxikZjIrNLu1VNOkocOq\",\n          \"siteDomain\": \"chargebee-labs.com\",\n          \"siteName\": \"ipaas-test\",\n          \"syncNow\": \"syncNow\",\n          \"type\": \"activecampaign\"\n        },\n        \"type\": \"GET\"\n      }\n      \n        }\n    };\n\ncard.retry = {\n        \"id\": \"retry\",\n        \"display\": \"Retry Initial Sync\",\n        \"icon\": \"ARROW\",\n        \"buttonLook\":\"FILLED\",\n        \"type\": \"DIRECT_LINK\",\n        \"request\": {\n            \"type\": \"ON_CLICK_DEFAULT_ACTION\",\n            \"apiEndPoint\": {\n                \"apiUrl\": url+\"/initialsync/run\",\n                \"type\": \"GET\",\n                \"headers\": {\n                    \"Elements-Formula-Instance-Id\": formula.activeCampaignInitialSyncRunSetup.instance\n                },\n                \"input\":{\n                    \"type\": steps.InputParams.input.type,\n                    \"siteDomain\": steps.InputParams.input.siteDomain,\n                    \"retry\": \"true\",\n                    \"action\": \"click\"\n                }\n            }\n        }\n    };\n\ndone({\n  statusCode: 200,\n  result: card\n})"}},{"id":260071,"onSuccess":[],"onFailure":[],"name":"SendProcessCard","type":"script","properties":{"body":"let url = steps.ChargebeeConfigParams.response.body.third_party_configuration.config_json.cloudElements.url;\nlet formula= steps.ChargebeeConfigParams.response.body.third_party_configuration.config_json.cloudElements.formula;\nlet card = {\n   \"cards\":[\n      {\n         \"card\": {\n            \"type\" : \"PROCESSING\",\n            \"processingText\": \" Syncing first 10 customers and their subscriptions\",\n            \"request\" : {\n               \"type\":\"DOC_READY_GET_CARD\",\n               \"apiEndPoint\":{\n                  \"apiUrl\": url+\"/initialsync/run\",\n                        \"type\": \"GET\",\n                        \"headers\": {\n                            \"Elements-Formula-Instance-Id\":formula.activeCampaignInitialSyncRunSetup.instance\n                        },\n                        \"input\":{\n                            \"type\": steps.InputParams.input.type,\n                            \"siteDomain\": steps.InputParams.input.siteDomain,\n                            \"action\": \"default\"\n                            \n                        }\n               }\n            }\n         },\n         \"id\" : \"check2\",\n          \"showRetry\":\"false\"\n      } \n   ]\n};\n\ndone({\n statusCode: 200,\n result: card\n})"}},{"id":260072,"onSuccess":["NewSyncDetails"],"onFailure":[],"name":"StartExcecution","type":"request","properties":{"method":"POST","api":"/formulas/instances/${steps.ConfigParams.config_json.cloudElements.formula.sync.instance}/executions","body":"${steps.ConfigParams.body}","query":""}},{"id":260073,"onSuccess":["StartExcecution"],"onFailure":["isLastSyncAttemptFailed"],"name":"SyncAgain","type":"filter","properties":{"body":"if(steps.InputParams.input.action ===\"click\"){\n  done(true);\n}\nif((steps.InputParams.input.retry === \"true\") ){\ndone(true);\n}else{\n  done(false);\n}"}},{"id":260074,"onSuccess":["MakeCard"],"onFailure":[],"name":"TpData","type":"script","properties":{"body":"let list = steps.ChargebeeGetTpEntityMapping.data.list;\nlet accountName = steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements.thirdParty.accountName;\nlet successLog = [];\nlet errorLog = [];\n\nif(list === undefined) {\n  list = [];\n}\n\nfor(var i=0;i<list.length;i++){\n  let tp = list[i].third_party_entity_mapping;\n  if(tp !== undefined) {\n    if(tp.status === \"synced\"){\n      let id = tp.entity_id;\n      let cId = tp.third_party_entity_id;\n  let activecampaign_data_url = \"https://\" + accountName + \".activehosted.com/app/contacts/\" + cId;\n  let ac_link = \"<a href='\"+activecampaign_data_url+\"' target='blank'>\"+cId+\"</a>\";\n\n  let chargebee_data_url = \"https://\"+steps.InputParams.input.siteName+\".\"+steps.InputParams.input.siteDomain+\"/admin-console/customers/\"+id;\n  let cb_link = \"<a href='\"+chargebee_data_url+\"' target='blank'>\"+id+\"</a>\";\n successLog.push(\"Customer id \" + cb_link + \" is synced as \" + ac_link + \" in ActiveCampaign\\n\");\n    }else if (tp.status === \"update_failed\"){\n       errorLog.push(tp.error_message);\n    }\n  }\n}\n\nlet data = {\n  successLog:successLog,\n  errorLog:errorLog,\n};\ndone(data);\n\n"}},{"id":260075,"onSuccess":["ChargebeeGetTpEntityMapping"],"onFailure":[],"name":"TPMappingParam","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey;\nlet siteName = steps.InputParams.input.siteName;\nlet siteDomain = steps.InputParams.input.siteDomain;\nlet type = steps.InputParams.input.type;\nlet password = \"\";\nlet startTime;\nlet endTime;\nlet syncStaus = steps.ChargebeeGetLastSyncDetails.data;\nlet formula= steps.ChargebeeGetTpIntegConf.data.config_json.cloudElements;\n\n\nstartTime = syncStaus.context.syncData.syncStart;\nendTime = formula.lastSyncTime;\n  \n\n\nlet params = {\n  config: {\n      url: \"https://\" + siteName + \".\" + siteDomain + \"/api/v2/third_party_entity_mappings/list_all\",\n      headers: {\n          Authorization: \"Basic \" + CE.b64(apiKey + \":\" + password)\n      },\n      query: {\n          integration_name: type,\n          \"modified_at[after]\": startTime,\n          limit: 10\n      },\n      apiKey: apiKey,\n      siteName: siteName,\n      siteDomain: siteDomain,\n      type: type\n  }\n};\n\ndone({ \n  params: params \n});\n"}},{"id":260076,"onSuccess":["ChargebeeGetTpSuccessDetails"],"onFailure":[],"name":"TPSuccessDetailsParam","type":"script","properties":{"body":"let params = steps.GetThirdPartyConfigParams.params.input;\nparams.query['status[is]'] = \"synced\";\n\ndone({params: params});"}},{"id":260077,"onSuccess":["processcardForRetry"],"onFailure":["EmailParams"],"name":"UpdateRunSync","type":"httpRequest","properties":{"method":"POST","retryDelay":"200","retryAttempts":"5","retryStatusCodes":"429","url":"${steps.RunSyncParam.url}","retry":"true","headers":"${steps.InputParams.input.config.auth}","query":"${steps.RunSyncParam.body}"}},{"id":260078,"onSuccess":["MakeCard"],"onFailure":[],"name":"UpdateStatus","type":"script","properties":{"body":"let successRecord = steps.TpData.successLog.length;\nlet errorRecord = steps.TpData.errorLog.length;\nlet input = steps.LastSyncDetails.response.body.third_party_sync_detail;\nlet total = successRecord+errorRecord;\n\nif(input.context === undefined) {\n  input.context = {\n  };\n}\ninput.status = \"succeeded\";\ninput.context.sync_context_messages = [ total +\" Customers processed (\"+successRecord+\" created, 0 updated, \"+errorRecord+\" not synced)\"];\ninput.context.syncData.total = total;\ninput.context.syncData.success = successRecord;\ninput.context.syncData.failed = errorRecord;\ninput.context.syncData.syncEnd = Math.round((new Date().getTime())/1000);\ninput.context.initialSync = true;\n\ndone({input:input});"}},{"id":260079,"onSuccess":["sendErrorMailParams"],"onFailure":["SendErrorCard-IntegrationError"],"name":"UpdateSyncError","type":"httpRequest","properties":{"method":"POST","retryDelay":"200","retryAttempts":"5","retryStatusCodes":"429","url":"${steps.CheckStatus.url}","retry":"true","headers":"${steps.CheckStatus.auth}","query":"${steps.CheckStatus.body}"}},{"id":260080,"onSuccess":["ChargebeePostUpdateTpIntegConf"],"onFailure":[],"name":"updateSyncSetup","type":"script","properties":{"body":"let apiKey = steps.InputParams.input.apiKey; \nlet siteName = steps.InputParams.input.siteName; \nlet siteDomain = steps.InputParams.input.siteDomain; \nlet type = steps.InputParams.input.type; \n\nlet tpConfig = steps.ChargebeeGetTpIntegConf.data.config_json;\nlet syncStatus = \"CONFIGURED\";\n\ntpConfig.cloudElements.formula.syncSetup.syncSetupStatus = syncStatus;\n\nlet tpConfigUpdateParams = steps.InputParams.updateTpConfigParams;\ntpConfigUpdateParams.body.config_json = tpConfig;\n\ndone({\n  tpConfigUpdateParams: tpConfigUpdateParams\n});"}},{"id":260081,"onSuccess":["ConfigParams"],"onFailure":[],"name":"updateSyncSetupRequest","type":"httpRequest","properties":{"method":"POST","retryDelay":"200","body":"${steps.updateSyncSetup.body}","retryAttempts":"5","retryStatusCodes":"429","url":"${steps.updateSyncSetup.url}","retry":"true","headers":"${steps.updateSyncSetup.headers}","query":""}},{"id":260082,"onSuccess":["MakeCard"],"onFailure":[],"name":"UpdateSyncSuccess","type":"httpRequest","properties":{"method":"POST","retryDelay":"200","retryAttempts":"5","retryStatusCodes":"429","url":"${steps.CheckStatus.url}","retry":"true","headers":"${steps.CheckStatus.auth}","query":"${steps.UpdateStatus.input}"}}],"triggers":[{"id":28672,"onSuccess":["InputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"subFormulas":[{"id":31257,"name":"ChargebeeGet","userId":27893,"accountId":24428,"createdDate":"2019-11-12T11:30:28Z","steps":[{"id":245638,"onSuccess":["ChargebeeGetCBDelay2"],"onFailure":["ChargebeeGetResult"],"name":"ChargebeeGetCallAgainCB","type":"filter","properties":{"body":"//done(false); //Since delay causing 30 second limit issues\n\n\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetCBData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"}},{"id":245636,"onSuccess":["ChargebeeGetCBDelay"],"onFailure":["ChargebeeGetResult2"],"name":"ChargebeeGetCallAgainHttp","type":"filter","properties":{"body":"done(false); //Since delay causing 30 second limit issues\n\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetHttpData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"}},{"id":245637,"onSuccess":["ChargebeeGetGetHttpData"],"onFailure":[],"name":"ChargebeeGetCBDelay","type":"httpRequest","properties":{"method":"GET","url":"${steps.ChargebeeGetInputParams.delay.url}","query":"${steps.ChargebeeGetInputParams.delay.query}","headers":"${steps.ChargebeeGetInputParams.delay.headers}"}},{"id":245639,"onSuccess":["ChargebeeGetGetCBData"],"onFailure":[],"name":"ChargebeeGetCBDelay2","type":"httpRequest","properties":{"method":"GET","url":"${steps.ChargebeeGetInputParams.delay.url}","headers":"${steps.ChargebeeGetInputParams.delay.headers}","query":"${steps.ChargebeeGetInputParams.delay.query}"}},{"id":244768,"onSuccess":[],"onFailure":[],"name":"ChargebeeGetError","type":"script","properties":{"body":"done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"}},{"id":244769,"onSuccess":["ChargebeeGetCallAgainCB"],"onFailure":["ChargebeeGetCallAgainCB"],"name":"ChargebeeGetGetCBData","type":"elementRequest","properties":{"method":"GET","acceptableStatusCodes":"200-600","api":"${steps.ChargebeeGetInputParams.url}","elementInstanceId":"${config.chargebee}","body":"","headers":"${steps.ChargebeeGetInputParams.headers}","query":"${steps.ChargebeeGetInputParams.query}"}},{"id":244774,"onSuccess":["ChargebeeGetCallAgainHttp"],"onFailure":["ChargebeeGetCallAgainHttp"],"name":"ChargebeeGetGetHttpData","type":"httpRequest","properties":{"method":"GET","acceptableStatusCodes":"200-600","body":"","url":"${steps.ChargebeeGetInputParams.url}","query":"${steps.ChargebeeGetInputParams.query}","headers":"${steps.ChargebeeGetInputParams.headers}"}},{"id":244764,"onSuccess":["ChargebeeGetIsValidUrl"],"onFailure":[],"name":"ChargebeeGetInputParams","type":"script","properties":{"body":"let url = trigger.args.url;\nlet query = trigger.args.query;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"}},{"id":244771,"onSuccess":["ChargebeeGetGetHttpData"],"onFailure":["ChargebeeGetGetCBData"],"name":"ChargebeeGetIsHttp","type":"filter","properties":{"body":"done(steps.ChargebeeGetInputParams.url.startsWith(\"https://\"));"}},{"id":244767,"onSuccess":["ChargebeeGetIsHttp"],"onFailure":["ChargebeeGetError"],"name":"ChargebeeGetIsValidUrl","type":"filter","properties":{"body":"done(steps.ChargebeeGetInputParams.url !== undefined && steps.ChargebeeGetInputParams.url!== \"\");"}},{"id":244770,"onSuccess":[],"onFailure":[],"name":"ChargebeeGetResult","type":"script","properties":{"body":"if(steps.ChargebeeGetGetCBData.response.code < 300) {\n  done({\n    cb_status:\"success\",\n    cb_code: steps.ChargebeeGetGetCBData.response.code,\n    data:steps.ChargebeeGetGetCBData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetCBData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetCBData.response!== undefined && steps.ChargebeeGetGetCBData.response.body!== undefined && steps.ChargebeeGetGetCBData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetCBData.response.body.error_code;\n    let cbcode = steps.ChargebeeGetGetCBData.response.code || 404;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_code: cbcode,\n    cb_exit:hardstop\n  });\n}\n\n"}},{"id":244775,"onSuccess":[],"onFailure":[],"name":"ChargebeeGetResult2","type":"script","properties":{"body":"if(steps.ChargebeeGetGetHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    cb_code: steps.ChargebeeGetGetHttpData.response.code,\n    data:steps.ChargebeeGetGetHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetHttpData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetHttpData.response.body!== undefined && steps.ChargebeeGetGetHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_code: steps.ChargebeeGetGetHttpData.response.code\n  });\n}\n\n"}}],"triggers":[{"id":27722,"onSuccess":["ChargebeeGetInputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"engine":"v3","active":true,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[{"id":59935,"key":"chargebee","name":"chargebee","type":"elementInstance","required":true}]},{"id":31258,"name":"ChargebeePost","userId":27893,"accountId":24428,"createdDate":"2019-11-12T12:17:49Z","steps":[{"id":245808,"onSuccess":["ChargebeePostCBDelay"],"onFailure":["ChargebeePostResult2"],"name":"ChargebeePostCallAgainHttp","type":"filter","properties":{"body":"done(false);\n//30 seconds limit issue \n\n\nif(steps.ChargebeePostInputParams.intervel.length > 0 && steps.ChargebeePostInputParams.retryCode[steps.ChargebeePostPostHttpData.response.code] !== undefined) {\n  steps.ChargebeePostInputParams.delay.query.delay = steps.ChargebeePostInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"}},{"id":245810,"onSuccess":["ChargebeePostPostHttpData"],"onFailure":[],"name":"ChargebeePostCBDelay","type":"httpRequest","properties":{"method":"GET","url":"${steps.ChargebeePostInputParams.delay.url}","query":"${steps.ChargebeePostInputParams.delay.query}","headers":"${steps.ChargebeePostInputParams.delay.headers}"}},{"id":244779,"onSuccess":[],"onFailure":[],"name":"ChargebeePostError","type":"script","properties":{"body":"done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"}},{"id":244782,"onSuccess":["ChargebeePostIsValidUrl"],"onFailure":[],"name":"ChargebeePostInputParams","type":"script","properties":{"body":"let url = trigger.args.url;\nlet query = trigger.args.query;\nlet body = trigger.args.body;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\nif(body === undefined) {\n  body = {};\n}\ndone({\n    url: url,\n    query: query,\n    body:body,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        501: true,\n        500: true\n        // 403: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true,\n        409: true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"}},{"id":244784,"onSuccess":["ChargebeePostPostHttpData"],"onFailure":["ChargebeePostError"],"name":"ChargebeePostIsValidUrl","type":"filter","properties":{"body":"done(steps.ChargebeePostInputParams.url !== undefined && steps.ChargebeePostInputParams.url!== \"\");"}},{"id":244781,"onSuccess":["ChargebeePostCallAgainHttp"],"onFailure":["ChargebeePostCallAgainHttp"],"name":"ChargebeePostPostHttpData","type":"httpRequest","properties":{"method":"POST","acceptableStatusCodes":"200-600","body":"${steps.ChargebeePostInputParams.body}","url":"${steps.ChargebeePostInputParams.url}","headers":"${steps.ChargebeePostInputParams.headers}","query":"${steps.ChargebeePostInputParams.query}"}},{"id":244786,"onSuccess":[],"onFailure":[],"name":"ChargebeePostResult2","type":"script","properties":{"body":"if(steps.ChargebeePostPostHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeePostPostHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeePostInputParams.hardStop[steps.ChargebeePostPostHttpData.response.code] !== undefined;\n  if(steps.ChargebeePostPostHttpData.response.body!== undefined && steps.ChargebeePostPostHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeePostPostHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_error_body: steps.ChargebeePostPostHttpData.response\n  });\n}\n\n"}}],"triggers":[{"id":27723,"onSuccess":["ChargebeePostInputParams"],"onFailure":[],"type":"manual","async":true,"name":"trigger","properties":{}}],"engine":"v3","active":true,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[]}],"method":"GET","uri":"/initialsync/run","engine":"v1","active":true,"debugLoggingEnabled":true,"singleThreaded":false,"api":"GET /initialsync/run","configuration":[]}